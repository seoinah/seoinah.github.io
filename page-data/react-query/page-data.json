{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/react-query/","result":{"pageContext":{"article":{"banner":null,"body":"<aside>\n💡 react-query는 data fetching, 캐싱, 동기화, 서버 쪽 데이터 업데이트 등을 쉽게 만들어주는 React 라이브러리\n</aside>\n<p>대부분의 기존 상태 관리 라이브러리는 클라이언트 상태 관리에 적합하지만, 비동기 또는 서버 샅애 관리에는 적합하지 않다.</p>\n<h2>기본 설정</h2>\n<h3>옵션</h3>\n<ol>\n<li>\n<p>staleTime</p>\n<p>캐시를 사용하면서 매번 background-refetching을 한 후, 변경 사항이 있으면 그 때 UI를 변경하기 때문에 매번 네트워크 요청이 발생한다.</p>\n<p>만약 서버 데이터가 자주 변경되지 않는 서비스의 경우 staleTime을 통해 background-refetching 시간을 조정할 수 있다.</p>\n</li>\n<li>\n<p>refetchOnMount</p>\n<p>useQuery hook의 옵션으로 줄 수 있는 값이다.</p>\n<p>기본값은 true로, 페이지를 최초 방문 후 데이터를 캐싱한 다음에 재방문시 컴포넌트가 마운트될 때 데이터가 stale(오래된) 상태이면 refetch가 발생한다.</p>\n<p>초기 데이터를 가져오는데 유용하며, 실시간으로 업데이트 되지 않는 사이트의 경우 false로 두어도 괜찮다.</p>\n<p>브라우저 포커스시에 refetch하는 것과 상관 없다.</p>\n</li>\n<li>\n<p>refetchOnWindowFocus</p>\n<p>서버 데이터가 변경되었을 때, 새로고침을 하지 않아도 window에 다시 focus를 한다면 refetch를 통해 데이터를 가져와 UI에 적용시킨다.</p>\n<p>→ window에 focus 된다는 것은?</p>\n<p>다른 탭에서 돌아오거나, alt tab으로 다른 앱을 사용하다 온다거나 등을 말한다.</p>\n<p>window에 focus 되었을 때 데이터가 stale 상태일때 refetch를 한다. (true로 설정되어 있을 경우)</p>\n</li>\n<li>\n<p>refetchOnReconnect</p>\n<p>네트워크 연결이 끊겼다가 다시 연결 되었을 때 refetch를 한다.</p>\n</li>\n<li>\n<p>cacheTime</p>\n<p>기본적으로 비활성 쿼리는 5분 후에 가비지 수집이 된다.</p>\n<p>이 시간을 변경하려면 cacheTime을 통해 변경할 수 있다.</p>\n</li>\n<li>\n<p>retry</p>\n<p>실패한 쿼리는 자동으로 3번 재시도 한다.</p>\n</li>\n<li>\n<p>suspense</p>\n<p>true로 설정할 경우 <a href=\"https://www.notion.so/Suspense-df3769c1028d4ef1b38a7bbd0da18628?pvs=21\">suspense</a> 기능을 제공한다.</p>\n</li>\n</ol>\n<h2>Queries</h2>\n<p>쿼리는 고유키(queryKey)에 연결된 비동기 데이터 소스 단위로 작동 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n \n <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> fetchTodoList<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿼리는 서버에서 데이터를 가져오기 위해 모든 Promise 기반 메서드에 대해 사용이 가능하다.</p>\n<h3>Query Keys</h3>\n<p>React Quer는 query key를 기반으로 쿼리 캐싱을 관리한다.</p>\n<p>쿼리 키는 단순한 문자열이 될 수도 있고, 많은 문자열과 중첩된 객체의 배열과 같이 복잡할 수도 있다.</p>\n<p>(쿼리 키가 직렬화 가능하고, 쿼리 데이터에 고유한 한 사용할 수 있다.)</p>\n<ul>\n<li>\n<p>배열 키</p>\n<p>쿼리에 데이터를 고유하게 설명하기 위해 추가 정보가 필요한 경우 문자열이 있는 배열과 직렬화 가능한 개체를 사용하여 설명할 수 있다.</p>\n<p>추가 매개변수가 있는 쿼리, 추가 옵션의 개체를 전달하는 것이 일반적이다.</p>\n<p>쿼리 기능이 변수에 의지 하는 경우 아래와 같이 쿼리 키에 포함된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todoId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> todoId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchTodoById</span><span class=\"token punctuation\">(</span>todoId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>Query Functions</h3>\n<p>쿼리 함수는 Promise를 return하는 모든 함수일 수 있다.</p>\n<p>return 된 Promise는 error를 발생시키거나 데이터를 가져와야 한다.</p>\n<h2>병렬 쿼리 (Parallel Queries)</h2>\n<p>병렬 쿼리는 병렬로 실행되거나 동시에 가져오는 동시성을 최대화 하기 위한 쿼리이다.</p>\n<h3>수동 병렬 쿼리</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// The following queries will execute in parallel</span>\n   <span class=\"token keyword\">const</span> usersQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> fetchUsers<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> teamsQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'teams'</span><span class=\"token punctuation\">,</span> fetchTeams<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> projectsQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> fetchProjects<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">...</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>원하는 만큼의 useQuery / useInfiniteQuery를 나란히 사용한다.</p>\n<h3>동적 병렬 쿼리</h3>\n<p>간단하게 말해서 queryKey와 queryFn을 동적으로 주는 방법이다.</p>\n<p>병렬 쿼리 작업을 수행을 하지만 상황에 따라 쿼리 작업이 유동적으로 변하는 것을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//useQueries의 사용 방법은 단순하게 useQuery를 배열로 넣어주는 것이다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> userQueries <span class=\"token operator\">=</span> <span class=\"token function\">useQueries</span><span class=\"token punctuation\">(</span>\n     users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n         <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchUserById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> queries <span class=\"token operator\">=</span> <span class=\"token function\">useQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    useQuery1<span class=\"token punctuation\">,</span>\n    useQuery2<span class=\"token punctuation\">,</span>\n    useQuery3<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 <a href=\"https://www.notion.so/Suspense-df3769c1028d4ef1b38a7bbd0da18628?pvs=21\">Suspense</a> 에 useQueries에 관한 내용이 조금 있는데 Suspense를 사용하고 있다면 참고해보자</p>\n<h2>종속 쿼리</h2>\n<p>종속 쿼리는 실행하기 이 전에 완료해야 하는 이전 쿼리에 의존한다.</p>\n<p>enabled쿼리 옵션만 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Get the user</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> getUserByEmail<span class=\"token punctuation\">)</span>\n \n <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> user<span class=\"token operator\">?.</span>id\n \n <span class=\"token comment\">// Then get the user's projects</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isIdle<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> projects <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n   <span class=\"token punctuation\">[</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   getProjectsByUser<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// The query will not execute until the userId exists</span>\n     <span class=\"token literal-property property\">enabled</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>userId<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// isIdle will be `true` until `enabled` is true and the query begins to fetch.</span>\n <span class=\"token comment\">// It will then go to the `isLoading` stage and hopefully the `isSuccess` stage :)</span></code></pre></div>\n<h2>쿼리 비활성화 / 일시 정지</h2>\n<p>쿼리가 자동으로 실행되지 않게 하기 위해서는 enabled 쿼리 옵션을 false로 설정하면 된다.</p>\n<p>enabled 옵션이 false로 설정되어 있으면,</p>\n<ul>\n<li>\n<p>쿼리에 캐시된 데이터가 있는 경우 :</p>\n<p>쿼리는 status === 'success'또는 isSuccess상태 에서 초기화된다 .</p>\n</li>\n<li>\n<p>쿼리에 캐시된 데이터가 없는 경우</p>\n<p>쿼리는 status === 'idle'또는 isIdle상태 에서 시작된다 .</p>\n</li>\n<li>\n<p>쿼리는 마운트 시 자동으로 가져오지 않는다.</p>\n</li>\n<li>\n<p>새 인스턴스가 마운트되거나 새 인스턴스가 나타날 때 쿼리가 백그라운드에서 자동으로 다시 가져오지 않는다.</p>\n</li>\n<li>\n<p>쿼리는 쿼리 클라이언트 invalidateQueries와 refetchQueries일반적으로 쿼리를 다시 가져오는 호출을 무시한다 .</p>\n</li>\n<li>\n<p>refetch 가져올 쿼리를 수동으로 트리거하는 데 사용할 수 있다.</p>\n</li>\n</ul>\n<p>!! 하지만 여기서 주의해야 할 점이 있다.</p>\n<p>enabled 옵션을 false로 설정할 경우, 첫 마운트 시 useQuery가 fetcher 함수를 자동 호출하고 실패할 경우 재시도 하는 행위를 사전 차단한 것임을 알아야 한다.</p>\n<p>한마디로 useQuery의 기능을 사용하지 않고, 수동적으로 refetch 함수를 통해 호출해야 한다.</p>\n<p>하지만 <strong>refetch</strong> 함수는 <strong>캐싱 결과는 조회하지 않고 완전히 무시한 채 요청을 보내는 메서드</strong>이다.</p>\n<p>때문에 react-query의 캐싱을 사용하고자 하는 경우에는 refetch 함수를 사용하는 것은 좋지 않다.</p>\n<p>때문에 나는 enabled 옵션을 사용할 때, 특정 상태를 충족할 때문 true로 하고, 그 외에는 false로 하여 초기 요청시 오류를 방지하고 있다.</p>\n<p>그렇게 하면 조건부로 enabled 옵션이 true로 설정되어 요청을 날리게 되면서 캐싱에도 저장이 된다.</p>\n<h2>쿼리 재시도</h2>\n<p>useQuery로 요청한 쿼리가 실패 시 retry 옵션을 통해 동작을 설정할 수 있다.</p>\n<p>따로 설정하지 않을 경우, 실패시  3번 연속 재 시도를 한다.</p>\n<p>쿼리를 실패하면 연속 재 시도의 최대 수에 도달하지 않은 경우 쿼리가 자동으로 쿼리를 다시 시도한다.</p>\n<ul>\n<li>retry = false : 재시도를 하지 않는다.</li>\n<li>retry = true : 실패한 요청을 무한하게 재시도 한다.</li>\n<li>retry = (숫자) : 지정한 숫자만큼 재시도 한다.</li>\n<li>retry = (failureCount, error) => …  : 요청이 실패한 이유에 따라 사용자 정의 논리를 허용한다.</li>\n</ul>\n<h3>Retry Delay</h3>\n<p>재시도는 요청이 실패할 경우 바로 시도 되는 것이 아니라, 설정할 수 있다.</p>\n<p>기본값 retryDelay은 1000시도할 때마다 두 배( ms 에서 시작)로 설정 되지만 30초를 초과할 수 없다.</p>\n<h2>Paginated / Lagged Queries</h2>\n<p>페이지가 있는 데이터에 일반적으로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchProjects<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>keepPreviousData</h3>\n<p>위와 같은 코드로 처리하게 되면, 각각의 새 페이지가 완전히 새로운 쿼리로 처리되기 때문에 UI가 success 및 loading 상태에서 점프하거나 점프하지 못하게 되는 경우가 발생한다.</p>\n<p>이 때 사용할 수 있는 옵션이 <strong>keepPreviousData</strong>이다.</p>\n<p>keepPreviousData를 true로 설정할 경우, 쿼리 키가 변경되어서 새로운 데이터를 요청하는 동안에도 마지막 data를 유지한다.</p>\n<p>이를 통해 페이지네이션을 구현할 때, 캐시되지 않은 페이지를 불러올 때 화면에서 목록이 사라져 깜빡거리는 현상을 방지할 수 있다.</p>\n<p>새 데이터가 오면 이전의 데이터가 원활하게 swap하여 새 데이터를 표시한다.</p>\n<p><strong>isPreviousData</strong>를 통해서 현재 쿼리가 제공하는 데이터가 이전 데이터인지 확인할 수 있다.</p>\n<h2>Infinite Queries</h2>\n<p>기존 데이터에 추가로 더 많은 데이터를 로드하거나, 무한 스크롤링 하는 데이터 목록에도 사용할 수 있다.</p>\n<p>이러한 유형의 쿼리가 필요할 때 useInfiniteQuery를 사용할 수 있다.</p>\n<p>useInfiniteQuery는 파라미터 값만 변경하여 동일한 useQuery를 무한정 호출할 때 사용한다.</p>\n<ul>\n<li>\n<p>data : 무한 쿼리 데이터를 포함하는 객체</p>\n</li>\n<li>\n<p>data.pages : 가져온 페이지를 포함하는 배열</p>\n</li>\n<li>\n<p>data.pageParams : useInfiniteQuery가 현재 어떤 페이지에 있는지 확인할 수 있는 파라미터</p>\n</li>\n<li>\n<p>fetchNextPage및 fetchPreviousPage기능</p>\n<ul>\n<li>fetchNextPage : 다음 페이지의 데이터를 호출할 때 사용한다.\n<ul>\n<li>useInfiniteQuery의 return 값에 포함된다.</li>\n<li>fetchNextPage를 통해 호출된 데이터는 배열에 가장 우측에 새롭게 담겨진다.</li>\n</ul>\n</li>\n<li>fetchPreviousPage : 이전 페이지의 데이터를 호출할 때 사용한다.\n<ul>\n<li>fetchPreviousPage를 통해 호출된 데이터는 배열에 가장 좌측에 새롭게 담겨진다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>getNextPageParam / getPreviousPageParam : 로드할 데이터가 더 있는지, 가져올 정보가 있는지 확인</p>\n<ul>\n<li>쿼리 함수에서 추가 매개변수로 제공된다.</li>\n<li>getNextPageParam : 다음 api를 요청할 때 사용될 pageParam값을 정할 수 있다. (return값)</li>\n<li>getPreviousPageParam : 이전 api를 요청할 때 사용될 pageParam값을 정할 수 있다. (return값)</li>\n<li>getNextPageParam이 undefined가 아닐 때, hasNextPage는 true이다.</li>\n<li>getPreviousPageParam이 undefined가 아닐 때, hasPreviousPage는 true이다.</li>\n</ul>\n</li>\n<li>\n<p>isFetchingNextPage / isFetchingPreviousPage : background refresh state와 loading more state 를 구분짓는데 사용한다.</p>\n</li>\n<li>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPersons</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'infinitePerson'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pageParam <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/person'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> pageParam\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lastPage<span class=\"token punctuation\">,</span> allPages</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lastPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> lastPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다음 페이지를 호출할 때 사용 될 pageParam</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">getPreviousPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstPage<span class=\"token punctuation\">,</span> allPages</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> firstPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> firstPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이전 페이지를 호출할 때 사용 될 pageParam </span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 로딩 중일 경우</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadingText</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 결과값이 전달되었을 경우</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Container</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> Iperson <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Box</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Box</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.NextButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>hasNextPage <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">fetchNextPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Next</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.NextButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 클릭 시 다음 페이지 호출 */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.PrevButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>hasPreviousPage <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">fetchPreviousPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Prev</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.PrevButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 클릭 시 이전 페이지 호출 */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Container</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>infinite query를 다시 가져와야 하는 경우</h3>\n<p>useInfiniteQuery문을 그냥 refetch 하게 되면 지금까지 조회한 모든 페이지를 다시 조회하게 된다.</p>\n<p>때문에 첫페이지만 다시 조회하기 위해서는 데이터를 초기화하고 가져와야 한다.</p>\n<p>remove를 한 후 refetch를 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">getRequestsQuery<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngetRequestsQuery<span class=\"token punctuation\">.</span><span class=\"token function\">refetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약에 첫페이지만 조회하는 것이 아니라면 첫 번째 쿼리에서 시작하여 각 그룹을 순차적으로 가져온다.</p>\n<h3>특정 페이지만 다시 가져오기</h3>\n<p>모든 페이지의 하위 집합만 refetch 하려면 useInfiniteQuery에서 return 하는 refetch 함수에서 refetchPage 함수를 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">onst <span class=\"token punctuation\">{</span> refetch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> fetchProjects<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lastPage<span class=\"token punctuation\">,</span> pages</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> lastPage<span class=\"token punctuation\">.</span>nextCursor<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// only refetch the first page // index === {refetch하고 싶은 페이지}</span>\n <span class=\"token function\">refetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">refetchPage</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>• refetchPage: (page: TData, index: number, allPages: TData[]) => boolean</p>\n<h2>Placeholder Query Data</h2>\n<ul>\n<li>placeholder data : initialData 옵셤과 유사하게 쿼리에 이미 데이터가 있는 것처럼 작동할 수 있지만, 데이터는 캐시에 유지되지 않는다.</li>\n</ul>\n<p>실제 데이터를 백그라운드에서 가져오는 동안 서버 데이터와는 관련 없는 보여주기용 가짜 데이터이다.</p>\n<p>→ 값으로 지정</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">placeholderData</span><span class=\"token operator\">:</span> placeholderTodos<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 함수로 지정</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> placeholderData <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">generateFakeTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> placeholderData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿼리의 placeholderData에 액세스하는 프로세스가 집중적이가 모든 렌더링에서 수행하는 작업아 아닌 경우 값을 memo하거나 memoization된 함수를 placeholderData값으로 전달할 수 있다.</p>\n<p>→ 캐시의 placeholderData</p>\n<p>경우에 따라 다른 쿼리의 캐시된 결과에서 쿼리에 대한 placeholderData를 제공할 수 있다.</p>\n<p>예를 들어 게시물의 미리보기 버전을 제공할 때 블로그 게시물 목록 쿼리에서 캐시된 데이터를 검색한 다음 개별 게시물 쿼리에 대한 placeholderData로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> blogPostId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'blogPost'</span><span class=\"token punctuation\">,</span> blogPostId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/blogPosts/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>blogPostId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function-variable function\">placeholderData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>      \n       <span class=\"token keyword\">return</span> queryClient\n         <span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blogPosts'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">?.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> blogPostId<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Initial Query Data (초기 쿼리 데이터)</h2>\n<p>Initial Data는 placeholder Data와는 다르게 캐시에 유지된다.</p>\n<p>때문에 부분적 또는 물완전한 데이터를 제공할 때는 Initial Data 대신에 placeholder data를 사용하자.</p>\n<p>initial data를 통해 쿼리의 초기 데이터를 설정하고 초기 로드 상태를 건너뛸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">initialData</span><span class=\"token operator\">:</span> initialTodos<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>stale time  &#x26;  initialDataUpdatedAt</h3>\n<p>initial data는 새롭게 패치된 것처럼 처리되기 때문에, staleTime 옵션에 의해 해석이 다르다.</p>\n<ul>\n<li>initial data를 설정하고 staleTime을 설정하지 않거나 0으로 설정하면 쿼리가 mount될 때 즉시 다시 가져온다.</li>\n<li>staleTime의 시간을 설정하면, 해당 데이터는 그 시간 동안 유효하기 때문에 백엔드에 요청하지 않는다.</li>\n</ul>\n<p><strong>initialDataUpdatedAt</strong>은 initialData가 생성되었을 때 React Query에 알리고 이를 고려하여 background refetch가 트리거 된다.</p>\n<p>기존 캐시 항목에서 dataUpdatedAt 타임스탬프와 initialData를 사용할 때 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">initialData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      queryClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">initialDataUpdatedAt</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token comment\">// ✅ initial data를 채우는데 사용한 쿼리 데이터가 </span>\n    <span class=\"token comment\">// staleTime(30초) 더 오래된 경우 백그라운드에서 다시 가져옵니다.</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>dataUpdatedAt<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>초기 데이터에 관계없이 쿼리를 다시 가져와야 하는지 여부와 시기를 결정하는데 필요한 모든 정보를 쿼리 인스턴스에 제공한다.</p>\n<h2>Prefetching</h2>\n<p>prefetchQuery 메서드를 사용하면 캐시에 넣을 쿼리 결과를 미리 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">prefetchTodos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n   <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">prefetchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> fetchTodos<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 이 쿼리에 대한 데이터가 이미 캐시에 있고 무효화 되지 않은 경우 데이터를 가져오지 않는다.</p>\n<p>→ 데이터가 지정된 staleTime보다 오래된 경우 쿼리를 가져온다.</p>\n<p>→ prefetch된 쿼리에 대한 Instance가 나타나지 않으면 cacheTime 이후에 삭제되어 가비지에 수집된다.</p>\n<h2>Mutations</h2>\n<p>일반적으로 데이터를 생성/수정/삭제하거나 서버 사이드 이펙트를 수행할 때 useMutation hook를 사용한다.</p>\n<p>→ mutate 함수는 비동기식 함수이므로 React 16와 이전 버전의 이벤트 콜백에서 직접 사용할 수 없다.</p>\n<h3>mutation 상태값 재설정</h3>\n<p>mutation의 error나 data 상태를 초기화하기 위해 reset 함수를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CreateTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">,</span> setTitle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>createTodo<span class=\"token punctuation\">)</span>\n \n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onCreateTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onCreateTodo<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n       </span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mutation<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n         <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span>\n         <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n       <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Create Todo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n     </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Mutation Side Effects</h3>\n<p>useMutation은 mutation의 life cycle의 모든 단계에서 빠르고 쉽게 side effect를 허용하는 옵션들이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">onMutate</span><span class=\"token operator\">:</span> <span class=\"token parameter\">variables</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// Mutation이 곧 발생함</span>\n \n     <span class=\"token comment\">// 선택적으로 롤백과 같은 경우에 사용할 데이터가 포함된 컨텍스트를 반환합니다.</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 오류가 발생했습니다!</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rolling back optimistic update with id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 붐 베이비!</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onSettled</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 오류 또는 성공... 중요하지 않습니다!</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//콜백 함수에서 promise를 반환하면 다음 callback이 호출되기 전에 기다린다.</span>\n<span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm first!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSettled</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm second!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>mutate를 호출할 때 useMutation에 정의된 콜백 외에 추가 콜백을 트리거 하고 싶을 때 동일한 콜백 옵션을 mutate 함수에 오버라이드 하면 된다.</p>\n<p>하지만, 컴포넌트가 mutation을 완료하기 전에 언마운트 된다면 재정의한 콜백이 실행되지 않는다.</p>\n<h3>Promises</h3>\n<p>mutate 대신에 <code class=\"language-text\">mutateAsync</code>를 사용하면 성공시 resolve되거나 오류를 발생시키는 promise를 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutateAsync</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Retry</h3>\n<p>리액트 쿼리는 mutation 요청이 실패했을 때 자동으로 다시 시도하지 않지만, <code class=\"language-text\">retry</code>옵션을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">retry</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>mutation 유지</h3>\n<p>mutation은 필요한 경우 hydration func을 통해 저장소에 유지되고 다시 시작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// \"addTo\" 돌연변이 정의</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setMutationDefaults</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addTodo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo<span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onMutate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variables</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 할 일 목록에 대한 현재 쿼리 취소</span>\n     <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">cancelQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span>\n \n     <span class=\"token comment\">// 낙관적 할일 생성</span>\n     <span class=\"token keyword\">const</span> optimisticTodo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> variables<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 할 일 목록에 낙관적 할 일 추가</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">old</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>old<span class=\"token punctuation\">,</span> optimisticTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n \n     <span class=\"token comment\">// 낙관적 할일과 함께 컨텍스트를 반환합니다.</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> optimisticTodo <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 할 일 목록의 낙관적 할 일을 결과로 바꿉니다.</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">old</span> <span class=\"token operator\">=></span> old<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> context<span class=\"token punctuation\">.</span>optimisticTodo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 할일 목록에서 낙관적 할일 제거</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">old</span> <span class=\"token operator\">=></span> old<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> context<span class=\"token punctuation\">.</span>optimisticTodo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">retry</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 일부 구성 요소에서 돌연변이 시작:</span>\n <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addTodo'</span><span class=\"token punctuation\">)</span>\n mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'title'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 예를 들어 장치가 오프라인이기 때문에 mutation가 일시 중지된 경우</span>\n <span class=\"token comment\">// 그러면 일시 중지된 돌연변이는 애플리케이션이 종료될 때 dehydrate될 수 있습니다.</span>\n <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">dehydrate</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 그런 다음 응용 프로그램이 시작될 때 mutation를 다시 수화할 수 있습니다.</span>\n <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 일시 중지된 mutation를 재개합니다.</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">resumePausedMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>쿼리 무효화</h2>\n<p>쿼리를 오래된 것으로 생각(staleTime에서 사용 중인 모든 구성을 재정의)하고 다시 가져올 수 있는 invalidateQueries 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 캐시의 모든 쿼리를 무효화</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// `todos`로 시작하는 키로 모든 쿼리를 무효화</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>invalidateQueries 는 매우 유연하지만, exact 옵션을 통해 완전히 일치한 것만 무효화 시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 아래 쿼리는 무효화</span>\n <span class=\"token keyword\">const</span> todoListQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchTodoList<span class=\"token punctuation\">)</span>\n \n  <span class=\"token comment\">// 그러나 아래 쿼리는 무효화</span>\n <span class=\"token keyword\">const</span> todoListQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'done'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchTodoList<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>mutation으로 인한 무효화</h3>\n<p>mutation이 되면 기존 쿼리를 무효화하고 새로 가져오는 것이 일반적이다.</p>\n<p>object를 업데이트 하는 mutation를 처리할 때 mutation의 응답으로 새 개체가 자동으로 반환되는 것이 일반적이다.</p>\n<p>mutation 함수에서 반환된 객체를 활용하고 쿼리 클라이언트의setQueryData 메서드를 사용하여 즉시 새 데이터로 기존 쿼리를 업데이트할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>editTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 두 번째 인수는 `mutate` 함수가 받는 변수 객체입니다.</span>\n     <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> variables</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> variables<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Do the laundry'</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">/// 아래 쿼리는 다음의 응답으로 업데이트됩니다.</span>\n <span class=\"token comment\">// 성공적인 돌연변이</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchTodoById<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p><strong>참고</strong></p>\n<p><a href=\"https://velog.io/@familyman80/React-Query-%ED%95%9C%EA%B8%80-%EB%A9%94%EB%89%B4%EC%96%BC#%ED%8C%81-%EC%9A%94%EB%A0%B9-%EB%B0%8F-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\">https://velog.io/@familyman80/React-Query-한글-메뉴얼#팁-요령-및-주의-사항</a><a href=\"https://velog.io/@familyman80/React-Query-%ED%95%9C%EA%B8%80-%EB%A9%94%EB%89%B4%EC%96%BC#%ED%8C%81-%EC%9A%94%EB%A0%B9-%EB%B0%8F-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\">https://velog.io/@familyman80/React-Query-한글-메뉴얼#팁-요령-및-주의-사항</a></p>","categories":["Study","React"],"date":"July 25, 2023","description":"[React] React Query","id":"1c4c3eea-404a-5228-be14-8f013e1cd51a","keywords":["React"],"slug":"/react-query/","title":"React Query","readingTime":{"text":"27 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["3262260831","948380417"],"slicesMap":{}}