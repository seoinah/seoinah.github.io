{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/javascript-객체/","result":{"pageContext":{"article":{"banner":null,"body":"<p>객체형은 원시형(하나의 데이터만 담을 수 있음)과 달리 다양한 데이터를 담을 수 있다.</p>\n<p>키로 구분된 데이터 집합이나 복잡한 개체를 저장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '객체 생성자' 문법</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// '객체 리터럴' 문법 => 객체 선언할 때 주로 이 방법 사용</span>\n\nuser<span class=\"token punctuation\">.</span>isAdmin <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 불린형 프로퍼티 추가</span>\n<span class=\"token keyword\">delete</span> user<span class=\"token punctuation\">.</span>isAdmin <span class=\"token comment\">// delete 연산자를 사용하여 프로퍼티 삭제</span></code></pre></div>\n<p>객체를 만들 때 객체 리터럴 안의 프로퍼티 키가 대괄호로 둘러싸여 있는 경우, 이를 계산된 프로퍼티라고 부른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> fruit <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"어떤 과일을 구매하시겠습니까?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> bag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 변수 fruit에서 프로퍼티 이름을 동적으로 받아 옵니다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> bag<span class=\"token punctuation\">.</span>apple <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fruit에 \"apple\"이 할당되었다면, 5가 출력됩니다.</span></code></pre></div>\n<ul>\n<li>참조에 의한 객체 복사</li>\n</ul>\n<p>객체는 ‘참조에 의해’ 저장되고 복사된다.</p>\n<p>변수엔 객체가 그대로 저장되는 것이 아니라, 객체가 저장되어 있는 ‘메모리 주소’엔 객체에 대한 ‘참조 값’ 이 저장.</p>\n<h2>옵셔널 체이닝 ‘?.’</h2>\n<p>옵셔널 체이닝을 사용하면 프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근할 수 있다.</p>\n<p><code class=\"language-text\">?.</code>은 <code class=\"language-text\">?.</code>'앞’의 평가 대상이 <code class=\"language-text\">undefined</code>나 <code class=\"language-text\">null</code>이면 평가를 멈추고 <code class=\"language-text\">undefined</code>를 반환한다.</p>\n<p>옵셔널 체이닝은 존재하지 않아도 괜찮은 대상에만 사용해야 한다.</p>\n<p>옵셔널 체이닝을 남용하면 에러를 조기에 발견하지 못하고 디버깅이 어려워진다.</p>\n<h2>심볼형</h2>\n<p>자바스크립트는 객체 프로퍼티 키로 오직 문자형과 심볼형만 허용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// id는 새로운 심볼이 됩니다.</span>\n<span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 심볼 id에는 \"id\"라는 설명이 붙습니다.</span>\n<span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> id1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> id2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>id1 <span class=\"token operator\">==</span> id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>심볼은 유일성이 보장되는 자료형이기 때문에, 설명이 동일한 심볼이어도 각 심볼값은 다르다.</p>\n<p>심볼은 다른 자료형으로 암시적 형 변환(자동 형 변환)이 되지 않는다.</p>\n<h3>숨김 프로퍼티</h3>\n<p>심볼을 이용하면 ‘숨김(hidden)’ 프로퍼티를 만들 수 있다. 숨김 프로퍼티는 외부 코드에서 접근이 불가능하고 값도 덮어 쓸 수 없다.</p>\n<p>심볼은 유일성이 보장되므로 우리가 만든 식별자와 제3의 스크립트에서 만든 식별자가 이름이 같더라도 충돌하지 않는다.</p>\n<h3>Symbols in a literal</h3>\n<p>객체 리터럴을 사용해 객체를 만든 경우, 대괄호로 심볼형 키를 만들어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span> <span class=\"token comment\">// \"id\": 123은 안됨</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>심볼은 <strong>for…in</strong> 에서 배제된다.</p>\n<p>Object.assign은 키가 심볼인 프로젝트를 배제하지 않고 객체 내 모든 프로퍼티를 복사한다.</p>\n<h3>전역 심볼</h3>\n<p>전역 심볼 레지스트리는 이름이 같은 심볼이 같은 개체를 가리키길 원하는 경우 사용한다.</p>\n<p>전역 심볼 레지스트리 안에 심볼을 만들고 해당 심볼에 접근하면, 이름이 같은 경우 동일한 심볼을 반환해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 전역 레지스트리에서 심볼을 읽습니다.</span>\n<span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 심볼이 존재하지 않으면 새로운 심볼을 만듭니다.</span>\n\n<span class=\"token comment\">// 동일한 이름을 이용해 심볼을 다시 읽습니다(좀 더 멀리 떨어진 코드에서도 가능합니다).</span>\n<span class=\"token keyword\">let</span> idAgain <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 두 심볼은 같습니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> id <span class=\"token operator\">===</span> idAgain <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3>Symbol.keyFor</h3>\n<p>전역 심볼을 찾을 때 사용되는 <code class=\"language-text\">Symbol.for(key)</code>에 반대되는 메서드도 있다.</p>\n<p> <code class=\"language-text\">Symbol.keyFor(sym)</code>를 사용하면 이름을 얻을 수 있다. 전역 심볼이 아닌 심볼에는 사용할 수 없다.</p>\n<h2>객체를 원시형으로 변환하기</h2>\n<p>객체는 숫자형이나 문자형으로만 형 변환이 일어난다고 생각하면 된다.</p>\n<h3>ToPrimitive</h3>\n<p>특수 객체 메서드를 사용하면 숫자형이나 문자형으로의 형 변환을 원하는 대로 조절할 수 있다.</p>\n<p>객체 형 변환은 세 종류로 구분되는데 ‘hint’(목표로 하는 자료형)라 불리는 값이 구분 기준이 된다.</p>\n<p>hint는 string, number, default(자료형이 확실치 않을 때) 가 있다.</p>\n<ul>\n<li>자바스크립트는 형 변환이 필요할 때 아래와 같은 알고리즘을 따라 원하는 메서드를 찾고 호출한다.</li>\n</ul>\n<ol>\n<li>객체에 <code class=\"language-text\">obj[Symbol.toPrimitive](hint)</code>메서드가 있는지 찾고, 있다면 메서드를 호출합니다. <code class=\"language-text\">Symbol.toPrimitive</code>는 시스템 심볼로, 심볼형 키로 사용됩니다.</li>\n<li>1에 해당하지 않고 hint가 <code class=\"language-text\">\"string\"</code>이라면,\n<ul>\n<li><code class=\"language-text\">obj.toString()</code>이나 <code class=\"language-text\">obj.valueOf()</code>를 호출합니다(존재하는 메서드만 실행됨).</li>\n</ul>\n</li>\n<li>1과 2에 해당하지 않고, hint가 <code class=\"language-text\">\"number\"</code>나 <code class=\"language-text\">\"default\"</code>라면\n<ul>\n<li><code class=\"language-text\">obj.valueOf()</code>나 <code class=\"language-text\">obj.toString()</code>을 호출합니다(존재하는 메서드만 실행됨).</li>\n</ul>\n</li>\n</ol>\n<h3>Symbol.toPrimitive</h3>\n<p>자바스크립트엔 Symbol.toPrimitive라는 내장 심볼이 존재한다.</p>\n<p>이 심볼은 목표로 하는 자료형(hint)를 명명하는데 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">money</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hint: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hint<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hint <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{name: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 데모:</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hint: string -> {name: \"John\"}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hint: number -> 1000</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">+</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hint: default -> 1500</span>\n\n_____________________________________________________________________\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">money</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// hint가 \"string\"인 경우</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{name: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// hint가 \"number\"나 \"default\"인 경우</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// toString -> {name: \"John\"}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// valueOf -> 1000</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">+</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// valueOf -> 1500</span></code></pre></div>","categories":["Study","Javascript"],"date":"July 29, 2023","description":"Javascript Doc에서의 객체 부분 정리","id":"74c30c26-378a-587c-bc61-05d4ab53d371","keywords":["Javascript"],"slug":"/javascript-객체/","title":"[Javascript Doc] 객체","readingTime":{"text":"8 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["3262260831","948380417"],"slicesMap":{}}