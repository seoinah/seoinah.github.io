{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-listing-index-tsx","path":"/blog/","result":{"pageContext":{"articles":[{"banner":null,"body":"<h2>자바스크립트는 동기?</h2>\n<p>자바스크립트는 싱글 스레드를 기반으로 동기 방식으로 작동한다.</p>\n<p>하지만, 자바스크립트에서 비동기로 작동하는 함수가 많은데?? 어떻게 비동기적으로 동작시킬 수 있을까?</p>\n<h3>이벤트 루프</h3>\n<p>자바스크립트는 이벤트 루프 덕분에 비동기 작업을 수행할 수 있다.</p>\n<p>코드를 실행하면 비동기 작업은, ‘실행’이라는 명령을 담아 이벤트 루프로 던진다.</p>\n<p>이벤트 루프가 비동기 작업을 담당 및 처리한다.</p>\n<p>덕분에 자바스크립트 엔진은 <strong>무거운 작업을 어딘가에 위임하고, 동기적으로 바로 다음 코드를 실행</strong>한다.</p>\n<p>그러다 이벤트 루프에서 작업이 완료되면, 비동기 작업을 만들 때 콜백 함수를 함께 지정하는데, 콜백 함수를 가지고 후속 작업을 진행한다.</p>\n<p>nodejs는 비동기로 작동하는 함수가 많다. 동기 코드를 비동기로 짜야 하는 경우도 있다.</p>\n<p>setTimeout / setInterval 등의 함수가 대표적인 비동기 루틴 생성 함수이며, promise는 비동기 루틴을 만드는 아주 효과적인 방법이다.</p>\n<h2>콜백 함수</h2>\n<p>콜백 함수는 <strong>함수 자체를 인자로 전달하는 함수</strong>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>파라미터 값이 주어지면 1초 뒤에 10을 더해 반환하는 코드가 있다.</p>\n<p>해당 함수가 처린된 직후 어떤 작업을 하고 싶다면 위와 같이 콜백 함수를 활용한다.</p>\n<p>함수는 비동기적으로 처리되어 increase() 안에 있는 함수가 모두 완료되기 까지 기다리지 않는다.</p>\n<p>콜백 안에 또 콜백을 넣어서 구현할 수 있는데, 여러번 반복될 경우 가독성이 나빠진다 ⇒ 콜백 지옥</p>\n<h2>Promise</h2>\n<p>콜백 지옥과 같은 코드가 형성되지 않게 ES6에 새로 도입된 방안</p>\n<p>동기적으로 보이는 비동기 처리 방식</p>\n<p>Promise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setTimeout</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 50보다 높으면 에러 발생</span>\n\t\t\t\t<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NumberTooBig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number 값에 + 10 후 성공 처리</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Promise에서 resolve된 값은 .then을 통해 받아 올 수 있음</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"여기다\"</span><span class=\"token punctuation\">,</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 또 다시 .then으로 처리 가능하다.</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 도중에 에러가 발생한다면 .catch를 통해 알 수 있음</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여러 작업을 연달아 처리할 때 함수를 여러번 감싸는 것이 아니라 .then을 사용하여 그 다음 작업을 설정한다.</p>\n<h2>async / await</h2>\n<p>Promise를 더욱 쉽게 사용할 수 있게 해주는 ES8(ES2017) 문법</p>\n<p>비동기 작업의 동기 처리를 해준다.</p>\n<p>함수의 앞 부분에 <code class=\"language-text\">async</code> 키워드를 추가하고, 함수 내부에서 Promise 앞 부분에 <code class=\"language-text\">await</code> 키워드를 사용한다.</p>\n<p>⇒ Promise가 끝날 때까지 기다리고, 결과 값을 특정 변수에 담을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setTimeout</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 50보다 높으면 에러 발생</span>\n\t\t\t\t<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NumberTooBig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number 값에 + 10 후 성공 처리</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tresult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tresult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//promise</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token comment\">// async/await 사용</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Axios</h2>\n<p>→ Promise API를 활용하는 HTTP 비동기 통신 라이브러리</p>\n<p>결과 값으로 Promise 객체를 받게 되는데, 데이터를 받아오지 못하고 줄거야 라는 약속만 해 놓은 상태이다.</p>\n<p>데이터를 받기 위해서는 axios.get 전에 데이터가 올 때까지 기다리겠다는 명령을 해야 하는데, 그 명령어가 await이다.</p>\n<p>Promise가 처리되길 기다리는 동안엔 엔진이 다른 일 (다른 스크립트 실행, 이벤트 처리 등)을 할 수 있기 때문에 CPU 리소스가 낭비되지 않는다.</p>\n<ol>\n<li>Axios는 운영환경에 따라서 브라우저간 XMLHttpRequest 객체 또는 Node.js의 HTTP API를 사용한다.</li>\n<li>Promise(ES6)를 사용. (promise가 상태를 관리하여 다른 코드가 비동기적으로 실행될 수 있도록 만드는 객체.)</li>\n<li>요청(Request) 응답 (reply)을 JSON 형태로 자동 변경</li>\n</ol>\n<h2>React hook (비동기 처리)</h2>\n<p>react에서 비동기 처리를 편하게 하기 위해 제공하는 훅이 잇다.</p>\n<ol>\n<li>\n<p>useState : 변수의 상태를 추적한다.</p>\n<p>변수의 내용이 변하면 자동으로 jsx가 재렌더링 되어 변화된 변수가 화면에 반영된다.</p>\n<p>useState를 사용하지 않으면 스크립트 내부에서 변수에 변화가 있어도 jsx는 변화를 감지하지 못해 항상 초기 상태만 표시하게 된다.</p>\n</li>\n<li>\n<p>useEffect : 변수의 상태를 추적해 작업을 한다.</p>\n<p>변수를 추적해 변화가 생긴다면 어떠한 기능을 수행할 수 있게 한다.</p>\n</li>\n</ol>\n<hr>\n<p><strong>참고</strong></p>\n<p><a href=\"https://bum-developer.tistory.com/entry/React-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-Promise-async-await\">https://bum-developer.tistory.com/entry/React-비동기-작업콜백-함수-Promise-async-await</a></p>","categories":["Study","Javascript","React"],"date":"July 29, 2023","description":"[Javascript] 비동기 작업","id":"2957346a-6f36-52f5-8009-b8c6e4844f0a","keywords":["Javascript","React"],"slug":"/비동기작업/","title":"비동기 작업","readingTime":{"text":"8 min read"}},{"banner":null,"body":"<aside>\n💡 react-query는 data fetching, 캐싱, 동기화, 서버 쪽 데이터 업데이트 등을 쉽게 만들어주는 React 라이브러리\n</aside>\n<p>대부분의 기존 상태 관리 라이브러리는 클라이언트 상태 관리에 적합하지만, 비동기 또는 서버 샅애 관리에는 적합하지 않다.</p>\n<h2>기본 설정</h2>\n<h3>옵션</h3>\n<ol>\n<li>\n<p>staleTime</p>\n<p>캐시를 사용하면서 매번 background-refetching을 한 후, 변경 사항이 있으면 그 때 UI를 변경하기 때문에 매번 네트워크 요청이 발생한다.</p>\n<p>만약 서버 데이터가 자주 변경되지 않는 서비스의 경우 staleTime을 통해 background-refetching 시간을 조정할 수 있다.</p>\n</li>\n<li>\n<p>refetchOnMount</p>\n<p>useQuery hook의 옵션으로 줄 수 있는 값이다.</p>\n<p>기본값은 true로, 페이지를 최초 방문 후 데이터를 캐싱한 다음에 재방문시 컴포넌트가 마운트될 때 데이터가 stale(오래된) 상태이면 refetch가 발생한다.</p>\n<p>초기 데이터를 가져오는데 유용하며, 실시간으로 업데이트 되지 않는 사이트의 경우 false로 두어도 괜찮다.</p>\n<p>브라우저 포커스시에 refetch하는 것과 상관 없다.</p>\n</li>\n<li>\n<p>refetchOnWindowFocus</p>\n<p>서버 데이터가 변경되었을 때, 새로고침을 하지 않아도 window에 다시 focus를 한다면 refetch를 통해 데이터를 가져와 UI에 적용시킨다.</p>\n<p>→ window에 focus 된다는 것은?</p>\n<p>다른 탭에서 돌아오거나, alt tab으로 다른 앱을 사용하다 온다거나 등을 말한다.</p>\n<p>window에 focus 되었을 때 데이터가 stale 상태일때 refetch를 한다. (true로 설정되어 있을 경우)</p>\n</li>\n<li>\n<p>refetchOnReconnect</p>\n<p>네트워크 연결이 끊겼다가 다시 연결 되었을 때 refetch를 한다.</p>\n</li>\n<li>\n<p>cacheTime</p>\n<p>기본적으로 비활성 쿼리는 5분 후에 가비지 수집이 된다.</p>\n<p>이 시간을 변경하려면 cacheTime을 통해 변경할 수 있다.</p>\n</li>\n<li>\n<p>retry</p>\n<p>실패한 쿼리는 자동으로 3번 재시도 한다.</p>\n</li>\n<li>\n<p>suspense</p>\n<p>true로 설정할 경우 <a href=\"https://www.notion.so/Suspense-df3769c1028d4ef1b38a7bbd0da18628?pvs=21\">suspense</a> 기능을 제공한다.</p>\n</li>\n</ol>\n<h2>Queries</h2>\n<p>쿼리는 고유키(queryKey)에 연결된 비동기 데이터 소스 단위로 작동 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n \n <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> fetchTodoList<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿼리는 서버에서 데이터를 가져오기 위해 모든 Promise 기반 메서드에 대해 사용이 가능하다.</p>\n<h3>Query Keys</h3>\n<p>React Quer는 query key를 기반으로 쿼리 캐싱을 관리한다.</p>\n<p>쿼리 키는 단순한 문자열이 될 수도 있고, 많은 문자열과 중첩된 객체의 배열과 같이 복잡할 수도 있다.</p>\n<p>(쿼리 키가 직렬화 가능하고, 쿼리 데이터에 고유한 한 사용할 수 있다.)</p>\n<ul>\n<li>\n<p>배열 키</p>\n<p>쿼리에 데이터를 고유하게 설명하기 위해 추가 정보가 필요한 경우 문자열이 있는 배열과 직렬화 가능한 개체를 사용하여 설명할 수 있다.</p>\n<p>추가 매개변수가 있는 쿼리, 추가 옵션의 개체를 전달하는 것이 일반적이다.</p>\n<p>쿼리 기능이 변수에 의지 하는 경우 아래와 같이 쿼리 키에 포함된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todoId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> todoId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchTodoById</span><span class=\"token punctuation\">(</span>todoId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>Query Functions</h3>\n<p>쿼리 함수는 Promise를 return하는 모든 함수일 수 있다.</p>\n<p>return 된 Promise는 error를 발생시키거나 데이터를 가져와야 한다.</p>\n<h2>병렬 쿼리 (Parallel Queries)</h2>\n<p>병렬 쿼리는 병렬로 실행되거나 동시에 가져오는 동시성을 최대화 하기 위한 쿼리이다.</p>\n<h3>수동 병렬 쿼리</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// The following queries will execute in parallel</span>\n   <span class=\"token keyword\">const</span> usersQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> fetchUsers<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> teamsQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'teams'</span><span class=\"token punctuation\">,</span> fetchTeams<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> projectsQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> fetchProjects<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">...</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>원하는 만큼의 useQuery / useInfiniteQuery를 나란히 사용한다.</p>\n<h3>동적 병렬 쿼리</h3>\n<p>간단하게 말해서 queryKey와 queryFn을 동적으로 주는 방법이다.</p>\n<p>병렬 쿼리 작업을 수행을 하지만 상황에 따라 쿼리 작업이 유동적으로 변하는 것을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//useQueries의 사용 방법은 단순하게 useQuery를 배열로 넣어주는 것이다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> userQueries <span class=\"token operator\">=</span> <span class=\"token function\">useQueries</span><span class=\"token punctuation\">(</span>\n     users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n         <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchUserById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> queries <span class=\"token operator\">=</span> <span class=\"token function\">useQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    useQuery1<span class=\"token punctuation\">,</span>\n    useQuery2<span class=\"token punctuation\">,</span>\n    useQuery3<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 <a href=\"https://www.notion.so/Suspense-df3769c1028d4ef1b38a7bbd0da18628?pvs=21\">Suspense</a> 에 useQueries에 관한 내용이 조금 있는데 Suspense를 사용하고 있다면 참고해보자</p>\n<h2>종속 쿼리</h2>\n<p>종속 쿼리는 실행하기 이 전에 완료해야 하는 이전 쿼리에 의존한다.</p>\n<p>enabled쿼리 옵션만 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Get the user</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> getUserByEmail<span class=\"token punctuation\">)</span>\n \n <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> user<span class=\"token operator\">?.</span>id\n \n <span class=\"token comment\">// Then get the user's projects</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isIdle<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> projects <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n   <span class=\"token punctuation\">[</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   getProjectsByUser<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// The query will not execute until the userId exists</span>\n     <span class=\"token literal-property property\">enabled</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>userId<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// isIdle will be `true` until `enabled` is true and the query begins to fetch.</span>\n <span class=\"token comment\">// It will then go to the `isLoading` stage and hopefully the `isSuccess` stage :)</span></code></pre></div>\n<h2>쿼리 비활성화 / 일시 정지</h2>\n<p>쿼리가 자동으로 실행되지 않게 하기 위해서는 enabled 쿼리 옵션을 false로 설정하면 된다.</p>\n<p>enabled 옵션이 false로 설정되어 있으면,</p>\n<ul>\n<li>\n<p>쿼리에 캐시된 데이터가 있는 경우 :</p>\n<p>쿼리는 status === 'success'또는 isSuccess상태 에서 초기화된다 .</p>\n</li>\n<li>\n<p>쿼리에 캐시된 데이터가 없는 경우</p>\n<p>쿼리는 status === 'idle'또는 isIdle상태 에서 시작된다 .</p>\n</li>\n<li>\n<p>쿼리는 마운트 시 자동으로 가져오지 않는다.</p>\n</li>\n<li>\n<p>새 인스턴스가 마운트되거나 새 인스턴스가 나타날 때 쿼리가 백그라운드에서 자동으로 다시 가져오지 않는다.</p>\n</li>\n<li>\n<p>쿼리는 쿼리 클라이언트 invalidateQueries와 refetchQueries일반적으로 쿼리를 다시 가져오는 호출을 무시한다 .</p>\n</li>\n<li>\n<p>refetch 가져올 쿼리를 수동으로 트리거하는 데 사용할 수 있다.</p>\n</li>\n</ul>\n<p>!! 하지만 여기서 주의해야 할 점이 있다.</p>\n<p>enabled 옵션을 false로 설정할 경우, 첫 마운트 시 useQuery가 fetcher 함수를 자동 호출하고 실패할 경우 재시도 하는 행위를 사전 차단한 것임을 알아야 한다.</p>\n<p>한마디로 useQuery의 기능을 사용하지 않고, 수동적으로 refetch 함수를 통해 호출해야 한다.</p>\n<p>하지만 <strong>refetch</strong> 함수는 <strong>캐싱 결과는 조회하지 않고 완전히 무시한 채 요청을 보내는 메서드</strong>이다.</p>\n<p>때문에 react-query의 캐싱을 사용하고자 하는 경우에는 refetch 함수를 사용하는 것은 좋지 않다.</p>\n<p>때문에 나는 enabled 옵션을 사용할 때, 특정 상태를 충족할 때문 true로 하고, 그 외에는 false로 하여 초기 요청시 오류를 방지하고 있다.</p>\n<p>그렇게 하면 조건부로 enabled 옵션이 true로 설정되어 요청을 날리게 되면서 캐싱에도 저장이 된다.</p>\n<h2>쿼리 재시도</h2>\n<p>useQuery로 요청한 쿼리가 실패 시 retry 옵션을 통해 동작을 설정할 수 있다.</p>\n<p>따로 설정하지 않을 경우, 실패시  3번 연속 재 시도를 한다.</p>\n<p>쿼리를 실패하면 연속 재 시도의 최대 수에 도달하지 않은 경우 쿼리가 자동으로 쿼리를 다시 시도한다.</p>\n<ul>\n<li>retry = false : 재시도를 하지 않는다.</li>\n<li>retry = true : 실패한 요청을 무한하게 재시도 한다.</li>\n<li>retry = (숫자) : 지정한 숫자만큼 재시도 한다.</li>\n<li>retry = (failureCount, error) => …  : 요청이 실패한 이유에 따라 사용자 정의 논리를 허용한다.</li>\n</ul>\n<h3>Retry Delay</h3>\n<p>재시도는 요청이 실패할 경우 바로 시도 되는 것이 아니라, 설정할 수 있다.</p>\n<p>기본값 retryDelay은 1000시도할 때마다 두 배( ms 에서 시작)로 설정 되지만 30초를 초과할 수 없다.</p>\n<h2>Paginated / Lagged Queries</h2>\n<p>페이지가 있는 데이터에 일반적으로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchProjects<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>keepPreviousData</h3>\n<p>위와 같은 코드로 처리하게 되면, 각각의 새 페이지가 완전히 새로운 쿼리로 처리되기 때문에 UI가 success 및 loading 상태에서 점프하거나 점프하지 못하게 되는 경우가 발생한다.</p>\n<p>이 때 사용할 수 있는 옵션이 <strong>keepPreviousData</strong>이다.</p>\n<p>keepPreviousData를 true로 설정할 경우, 쿼리 키가 변경되어서 새로운 데이터를 요청하는 동안에도 마지막 data를 유지한다.</p>\n<p>이를 통해 페이지네이션을 구현할 때, 캐시되지 않은 페이지를 불러올 때 화면에서 목록이 사라져 깜빡거리는 현상을 방지할 수 있다.</p>\n<p>새 데이터가 오면 이전의 데이터가 원활하게 swap하여 새 데이터를 표시한다.</p>\n<p><strong>isPreviousData</strong>를 통해서 현재 쿼리가 제공하는 데이터가 이전 데이터인지 확인할 수 있다.</p>\n<h2>Infinite Queries</h2>\n<p>기존 데이터에 추가로 더 많은 데이터를 로드하거나, 무한 스크롤링 하는 데이터 목록에도 사용할 수 있다.</p>\n<p>이러한 유형의 쿼리가 필요할 때 useInfiniteQuery를 사용할 수 있다.</p>\n<p>useInfiniteQuery는 파라미터 값만 변경하여 동일한 useQuery를 무한정 호출할 때 사용한다.</p>\n<ul>\n<li>\n<p>data : 무한 쿼리 데이터를 포함하는 객체</p>\n</li>\n<li>\n<p>data.pages : 가져온 페이지를 포함하는 배열</p>\n</li>\n<li>\n<p>data.pageParams : useInfiniteQuery가 현재 어떤 페이지에 있는지 확인할 수 있는 파라미터</p>\n</li>\n<li>\n<p>fetchNextPage및 fetchPreviousPage기능</p>\n<ul>\n<li>fetchNextPage : 다음 페이지의 데이터를 호출할 때 사용한다.\n<ul>\n<li>useInfiniteQuery의 return 값에 포함된다.</li>\n<li>fetchNextPage를 통해 호출된 데이터는 배열에 가장 우측에 새롭게 담겨진다.</li>\n</ul>\n</li>\n<li>fetchPreviousPage : 이전 페이지의 데이터를 호출할 때 사용한다.\n<ul>\n<li>fetchPreviousPage를 통해 호출된 데이터는 배열에 가장 좌측에 새롭게 담겨진다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>getNextPageParam / getPreviousPageParam : 로드할 데이터가 더 있는지, 가져올 정보가 있는지 확인</p>\n<ul>\n<li>쿼리 함수에서 추가 매개변수로 제공된다.</li>\n<li>getNextPageParam : 다음 api를 요청할 때 사용될 pageParam값을 정할 수 있다. (return값)</li>\n<li>getPreviousPageParam : 이전 api를 요청할 때 사용될 pageParam값을 정할 수 있다. (return값)</li>\n<li>getNextPageParam이 undefined가 아닐 때, hasNextPage는 true이다.</li>\n<li>getPreviousPageParam이 undefined가 아닐 때, hasPreviousPage는 true이다.</li>\n</ul>\n</li>\n<li>\n<p>isFetchingNextPage / isFetchingPreviousPage : background refresh state와 loading more state 를 구분짓는데 사용한다.</p>\n</li>\n<li>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPersons</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'infinitePerson'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pageParam <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/person'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> pageParam\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lastPage<span class=\"token punctuation\">,</span> allPages</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lastPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> lastPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다음 페이지를 호출할 때 사용 될 pageParam</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">getPreviousPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstPage<span class=\"token punctuation\">,</span> allPages</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> firstPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> firstPage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이전 페이지를 호출할 때 사용 될 pageParam </span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 로딩 중일 경우</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadingText</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 결과값이 전달되었을 경우</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Container</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> Iperson <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Box</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Box</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.NextButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>hasNextPage <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">fetchNextPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Next</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.NextButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 클릭 시 다음 페이지 호출 */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person.PrevButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>hasPreviousPage <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">fetchPreviousPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Prev</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.PrevButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 클릭 시 이전 페이지 호출 */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Person.Container</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>infinite query를 다시 가져와야 하는 경우</h3>\n<p>useInfiniteQuery문을 그냥 refetch 하게 되면 지금까지 조회한 모든 페이지를 다시 조회하게 된다.</p>\n<p>때문에 첫페이지만 다시 조회하기 위해서는 데이터를 초기화하고 가져와야 한다.</p>\n<p>remove를 한 후 refetch를 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">getRequestsQuery<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngetRequestsQuery<span class=\"token punctuation\">.</span><span class=\"token function\">refetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약에 첫페이지만 조회하는 것이 아니라면 첫 번째 쿼리에서 시작하여 각 그룹을 순차적으로 가져온다.</p>\n<h3>특정 페이지만 다시 가져오기</h3>\n<p>모든 페이지의 하위 집합만 refetch 하려면 useInfiniteQuery에서 return 하는 refetch 함수에서 refetchPage 함수를 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">onst <span class=\"token punctuation\">{</span> refetch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> fetchProjects<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lastPage<span class=\"token punctuation\">,</span> pages</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> lastPage<span class=\"token punctuation\">.</span>nextCursor<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// only refetch the first page // index === {refetch하고 싶은 페이지}</span>\n <span class=\"token function\">refetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">refetchPage</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>• refetchPage: (page: TData, index: number, allPages: TData[]) => boolean</p>\n<h2>Placeholder Query Data</h2>\n<ul>\n<li>placeholder data : initialData 옵셤과 유사하게 쿼리에 이미 데이터가 있는 것처럼 작동할 수 있지만, 데이터는 캐시에 유지되지 않는다.</li>\n</ul>\n<p>실제 데이터를 백그라운드에서 가져오는 동안 서버 데이터와는 관련 없는 보여주기용 가짜 데이터이다.</p>\n<p>→ 값으로 지정</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">placeholderData</span><span class=\"token operator\">:</span> placeholderTodos<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 함수로 지정</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> placeholderData <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">generateFakeTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> placeholderData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿼리의 placeholderData에 액세스하는 프로세스가 집중적이가 모든 렌더링에서 수행하는 작업아 아닌 경우 값을 memo하거나 memoization된 함수를 placeholderData값으로 전달할 수 있다.</p>\n<p>→ 캐시의 placeholderData</p>\n<p>경우에 따라 다른 쿼리의 캐시된 결과에서 쿼리에 대한 placeholderData를 제공할 수 있다.</p>\n<p>예를 들어 게시물의 미리보기 버전을 제공할 때 블로그 게시물 목록 쿼리에서 캐시된 데이터를 검색한 다음 개별 게시물 쿼리에 대한 placeholderData로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> blogPostId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'blogPost'</span><span class=\"token punctuation\">,</span> blogPostId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/blogPosts/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>blogPostId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function-variable function\">placeholderData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>      \n       <span class=\"token keyword\">return</span> queryClient\n         <span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blogPosts'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">?.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> blogPostId<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Initial Query Data (초기 쿼리 데이터)</h2>\n<p>Initial Data는 placeholder Data와는 다르게 캐시에 유지된다.</p>\n<p>때문에 부분적 또는 물완전한 데이터를 제공할 때는 Initial Data 대신에 placeholder data를 사용하자.</p>\n<p>initial data를 통해 쿼리의 초기 데이터를 설정하고 초기 로드 상태를 건너뛸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">initialData</span><span class=\"token operator\">:</span> initialTodos<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>stale time  &#x26;  initialDataUpdatedAt</h3>\n<p>initial data는 새롭게 패치된 것처럼 처리되기 때문에, staleTime 옵션에 의해 해석이 다르다.</p>\n<ul>\n<li>initial data를 설정하고 staleTime을 설정하지 않거나 0으로 설정하면 쿼리가 mount될 때 즉시 다시 가져온다.</li>\n<li>staleTime의 시간을 설정하면, 해당 데이터는 그 시간 동안 유효하기 때문에 백엔드에 요청하지 않는다.</li>\n</ul>\n<p><strong>initialDataUpdatedAt</strong>은 initialData가 생성되었을 때 React Query에 알리고 이를 고려하여 background refetch가 트리거 된다.</p>\n<p>기존 캐시 항목에서 dataUpdatedAt 타임스탬프와 initialData를 사용할 때 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">initialData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      queryClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">initialDataUpdatedAt</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token comment\">// ✅ initial data를 채우는데 사용한 쿼리 데이터가 </span>\n    <span class=\"token comment\">// staleTime(30초) 더 오래된 경우 백그라운드에서 다시 가져옵니다.</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>dataUpdatedAt<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>초기 데이터에 관계없이 쿼리를 다시 가져와야 하는지 여부와 시기를 결정하는데 필요한 모든 정보를 쿼리 인스턴스에 제공한다.</p>\n<h2>Prefetching</h2>\n<p>prefetchQuery 메서드를 사용하면 캐시에 넣을 쿼리 결과를 미리 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">prefetchTodos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n   <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">prefetchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> fetchTodos<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 이 쿼리에 대한 데이터가 이미 캐시에 있고 무효화 되지 않은 경우 데이터를 가져오지 않는다.</p>\n<p>→ 데이터가 지정된 staleTime보다 오래된 경우 쿼리를 가져온다.</p>\n<p>→ prefetch된 쿼리에 대한 Instance가 나타나지 않으면 cacheTime 이후에 삭제되어 가비지에 수집된다.</p>\n<h2>Mutations</h2>\n<p>일반적으로 데이터를 생성/수정/삭제하거나 서버 사이드 이펙트를 수행할 때 useMutation hook를 사용한다.</p>\n<p>→ mutate 함수는 비동기식 함수이므로 React 16와 이전 버전의 이벤트 콜백에서 직접 사용할 수 없다.</p>\n<h3>mutation 상태값 재설정</h3>\n<p>mutation의 error나 data 상태를 초기화하기 위해 reset 함수를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CreateTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">,</span> setTitle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>createTodo<span class=\"token punctuation\">)</span>\n \n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onCreateTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onCreateTodo<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n       </span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mutation<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n         <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span>\n         <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n       <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n       </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Create Todo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n     </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Mutation Side Effects</h3>\n<p>useMutation은 mutation의 life cycle의 모든 단계에서 빠르고 쉽게 side effect를 허용하는 옵션들이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">onMutate</span><span class=\"token operator\">:</span> <span class=\"token parameter\">variables</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// Mutation이 곧 발생함</span>\n \n     <span class=\"token comment\">// 선택적으로 롤백과 같은 경우에 사용할 데이터가 포함된 컨텍스트를 반환합니다.</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 오류가 발생했습니다!</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rolling back optimistic update with id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 붐 베이비!</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onSettled</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 오류 또는 성공... 중요하지 않습니다!</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//콜백 함수에서 promise를 반환하면 다음 callback이 호출되기 전에 기다린다.</span>\n<span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm first!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSettled</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm second!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>mutate를 호출할 때 useMutation에 정의된 콜백 외에 추가 콜백을 트리거 하고 싶을 때 동일한 콜백 옵션을 mutate 함수에 오버라이드 하면 된다.</p>\n<p>하지만, 컴포넌트가 mutation을 완료하기 전에 언마운트 된다면 재정의한 콜백이 실행되지 않는다.</p>\n<h3>Promises</h3>\n<p>mutate 대신에 <code class=\"language-text\">mutateAsync</code>를 사용하면 성공시 resolve되거나 오류를 발생시키는 promise를 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutateAsync</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Retry</h3>\n<p>리액트 쿼리는 mutation 요청이 실패했을 때 자동으로 다시 시도하지 않지만, <code class=\"language-text\">retry</code>옵션을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">retry</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>mutation 유지</h3>\n<p>mutation은 필요한 경우 hydration func을 통해 저장소에 유지되고 다시 시작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// \"addTo\" 돌연변이 정의</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setMutationDefaults</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addTodo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> addTodo<span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onMutate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variables</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 할 일 목록에 대한 현재 쿼리 취소</span>\n     <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">cancelQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span>\n \n     <span class=\"token comment\">// 낙관적 할일 생성</span>\n     <span class=\"token keyword\">const</span> optimisticTodo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> variables<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 할 일 목록에 낙관적 할 일 추가</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">old</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>old<span class=\"token punctuation\">,</span> optimisticTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n \n     <span class=\"token comment\">// 낙관적 할일과 함께 컨텍스트를 반환합니다.</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> optimisticTodo <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 할 일 목록의 낙관적 할 일을 결과로 바꿉니다.</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">old</span> <span class=\"token operator\">=></span> old<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> context<span class=\"token punctuation\">.</span>optimisticTodo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 할일 목록에서 낙관적 할일 제거</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">old</span> <span class=\"token operator\">=></span> old<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> context<span class=\"token punctuation\">.</span>optimisticTodo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">retry</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 일부 구성 요소에서 돌연변이 시작:</span>\n <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addTodo'</span><span class=\"token punctuation\">)</span>\n mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'title'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 예를 들어 장치가 오프라인이기 때문에 mutation가 일시 중지된 경우</span>\n <span class=\"token comment\">// 그러면 일시 중지된 돌연변이는 애플리케이션이 종료될 때 dehydrate될 수 있습니다.</span>\n <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">dehydrate</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 그런 다음 응용 프로그램이 시작될 때 mutation를 다시 수화할 수 있습니다.</span>\n <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 일시 중지된 mutation를 재개합니다.</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">resumePausedMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>쿼리 무효화</h2>\n<p>쿼리를 오래된 것으로 생각(staleTime에서 사용 중인 모든 구성을 재정의)하고 다시 가져올 수 있는 invalidateQueries 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 캐시의 모든 쿼리를 무효화</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// `todos`로 시작하는 키로 모든 쿼리를 무효화</span>\n queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>invalidateQueries 는 매우 유연하지만, exact 옵션을 통해 완전히 일치한 것만 무효화 시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 아래 쿼리는 무효화</span>\n <span class=\"token keyword\">const</span> todoListQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchTodoList<span class=\"token punctuation\">)</span>\n \n  <span class=\"token comment\">// 그러나 아래 쿼리는 무효화</span>\n <span class=\"token keyword\">const</span> todoListQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'done'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchTodoList<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>mutation으로 인한 무효화</h3>\n<p>mutation이 되면 기존 쿼리를 무효화하고 새로 가져오는 것이 일반적이다.</p>\n<p>object를 업데이트 하는 mutation를 처리할 때 mutation의 응답으로 새 개체가 자동으로 반환되는 것이 일반적이다.</p>\n<p>mutation 함수에서 반환된 객체를 활용하고 쿼리 클라이언트의setQueryData 메서드를 사용하여 즉시 새 데이터로 기존 쿼리를 업데이트할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>editTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 두 번째 인수는 `mutate` 함수가 받는 변수 객체입니다.</span>\n     <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> variables</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> variables<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Do the laundry'</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">/// 아래 쿼리는 다음의 응답으로 업데이트됩니다.</span>\n <span class=\"token comment\">// 성공적인 돌연변이</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchTodoById<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p><strong>참고</strong></p>\n<p><a href=\"https://velog.io/@familyman80/React-Query-%ED%95%9C%EA%B8%80-%EB%A9%94%EB%89%B4%EC%96%BC#%ED%8C%81-%EC%9A%94%EB%A0%B9-%EB%B0%8F-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\">https://velog.io/@familyman80/React-Query-한글-메뉴얼#팁-요령-및-주의-사항</a><a href=\"https://velog.io/@familyman80/React-Query-%ED%95%9C%EA%B8%80-%EB%A9%94%EB%89%B4%EC%96%BC#%ED%8C%81-%EC%9A%94%EB%A0%B9-%EB%B0%8F-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\">https://velog.io/@familyman80/React-Query-한글-메뉴얼#팁-요령-및-주의-사항</a></p>","categories":["Study","React"],"date":"July 25, 2023","description":"[React] React Query","id":"1c4c3eea-404a-5228-be14-8f013e1cd51a","keywords":["React"],"slug":"/react-query/","title":"React Query","readingTime":{"text":"27 min read"}},{"banner":null,"body":"<h1>성능 최적화</h1>\n<h2>Rerendering 방지</h2>\n<p>컴포넌트 리렌더링 되는 조건은</p>\n<ol>\n<li>전달받은 props가 변경될 때</li>\n<li>부모 컴포넌트가 리렌더링 될 때</li>\n<li>자신의 state가 변경될 때</li>\n</ol>\n<p>이다.</p>\n<h3>useMemo</h3>\n<p>컴포넌트가 리렌더링 될 때마다 함수도 리렌더링 되는데, 리렌더링할 때마다 실행 시간이 오래 걸리는 함수를 연산된 값을 <code class=\"language-text\">useMemo</code>라는 Hook 을 사용하여 재사용할 수 있다.</p>\n<p>⇒ memoization : 기존에 수행한 연산의 결과값을 어딘가에 저장해두고 동일한 입력이 들어오면 재활용하는 프로그래밍 기법. memoization을 절적히 적용하면 중복 연산을 피할 수 있기 때문에 메모리를 조금 더 쓰더라도 애플리케이션의 성능을 최적화할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useMemo</code>는 의존성이 변경되었을 때에만 메모이제이션된 값만 다시 계산한다.</p>\n<p>단, useMemo를 남용하면 단점이 있다.</p>\n<ol>\n<li>컴포넌트의 복잡도가 올라가 코드 가독성이 떨어지고, 따라서 유지보수가 어려워진다.</li>\n<li>useMemo가 적용된 레퍼런스는 재활용을 위해 가비지 컬렉션에서 제외되기 때문에 메모리를 더 쓴다.</li>\n</ol>\n<h3>React.memo 컴포넌트 메모이제이션</h3>\n<p>useMemo와 달리 hook이 아니므로 클래스 컴포넌트에도 적용이 가능하다.</p>\n<p>컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정하여 함수형 컴포넌트의 리렌더링 성능을 최적화한다.</p>\n<p>React.memo는 콜백함수를 이용해 메모이제이션을 적용할지 여부를 판단할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* props를 사용하여 렌더링 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>useCallback</h3>\n<p>useMemo가 리턴되는 값을 memoize 시켜주었는데, useMemo와 비슷한 useCallback은 함수 선언을 memoize 하는데 사용된다.</p>\n<p>자식 컴포넌트에 함수를 넘겨줄 때 새로 생성된 함수를 넘겨주면, 자식 컴포넌트를 React.memo로 감쌌어도 전달된 함수 props이 다른 참조 값을 가지므로 props가 변경된 것으로 인식하고 리렌더링을 한다. 이를 방지하기 위해 useCallback을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3><strong>자식 컴포넌트의 props로 객체를 넘겨줄 경우 변형 X</strong></h3>\n<p>자식 컴포넌트의 props로 전달할 때 형태에 주의해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 생성자 함수</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">prop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Obj</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// 객체 리터럴</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">prop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">property</span><span class=\"token operator\">:</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>새로 생성된 객체가 props로 들어가므로 컴포넌트가 리렌더링 될 때마다 새로운 객체가 생성되어 자식 컴포넌트로 전달된다.</p>\n<p>생성자 함수나 객체 리터럴로 객체를 생성해서 하위 컴포넌트로 넘겨주는 방식이 아닌, state를 그대로 하위컴포넌트에 넘겨주어 필요한 데이터 가공을 그 하위컴포넌트에서 해주는 것이 좋다.</p>\n<h3>key 값에 index 사용 X</h3>\n<p>어떤 배열에 중간에 어떤 요소가 삽입될때 그 중간 이후에 위치한 요소들은 전부 index가 변경된다.</p>\n<p>그러면 key 값이 변경되면서 React는 key가 동일 할 경우, 동일한 DOM Element를 보여주기 때문에 예상치 못한 문제가 발생할 수 있다.</p>\n<h3>Input onChange 최적화</h3>\n<p>보통 input 태그에 onChange 이벤트를 줄때 타이핑을 할때마다 해당 컴포넌트가 렌더링 되어, 최적화 방법을 많이 찾는다.</p>","categories":["Study","React"],"date":"July 25, 2023","description":"[React] 성능 최적화","id":"c78933bf-f6d6-55c3-9fe6-7a6dc3b724b2","keywords":["React"],"slug":"/성능최적화/","title":"리액트 성능 최적화","readingTime":{"text":"5 min read"}},{"banner":null,"body":"<h1>비동기 작업</h1>\n<p>상위 항목: React (<a href=\"https://www.notion.so/React-cd7a3137ef7d4eac9c6879442e07e5a1?pvs=21\">https://www.notion.so/React-cd7a3137ef7d4eac9c6879442e07e5a1?pvs=21</a>), JavaScript (<a href=\"https://www.notion.so/JavaScript-367630c26993403a857566a44039dbb0?pvs=21\">https://www.notion.so/JavaScript-367630c26993403a857566a44039dbb0?pvs=21</a>)\n학문 분야: Javascript, React</p>\n<h2>자바스크립트는 동기?</h2>\n<p>자바스크립트는 싱글 스레드를 기반으로 동기 방식으로 작동한다.</p>\n<p>하지만, 자바스크립트에서 비동기로 작동하는 함수가 많은데?? 어떻게 비동기적으로 동작시킬 수 있을까?</p>\n<h3>이벤트 루프</h3>\n<p>자바스크립트는 이벤트 루프 덕분에 비동기 작업을 수행할 수 있다.</p>\n<p>코드를 실행하면 비동기 작업은, ‘실행’이라는 명령을 담아 이벤트 루프로 던진다.</p>\n<p>이벤트 루프가 비동기 작업을 담당 및 처리한다.</p>\n<p>덕분에 자바스크립트 엔진은 <strong>무거운 작업을 어딘가에 위임하고, 동기적으로 바로 다음 코드를 실행</strong>한다.</p>\n<p>그러다 이벤트 루프에서 작업이 완료되면, 비동기 작업을 만들 때 콜백 함수를 함께 지정하는데, 콜백 함수를 가지고 후속 작업을 진행한다.</p>\n<p>nodejs는 비동기로 작동하는 함수가 많다. 동기 코드를 비동기로 짜야 하는 경우도 있다.</p>\n<p>setTimeout / setInterval 등의 함수가 대표적인 비동기 루틴 생성 함수이며, promise는 비동기 루틴을 만드는 아주 효과적인 방법이다.</p>\n<h2>콜백 함수</h2>\n<p>콜백 함수는 <strong>함수 자체를 인자로 전달하는 함수</strong>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>파라미터 값이 주어지면 1초 뒤에 10을 더해 반환하는 코드가 있다.</p>\n<p>해당 함수가 처린된 직후 어떤 작업을 하고 싶다면 위와 같이 콜백 함수를 활용한다.</p>\n<p>함수는 비동기적으로 처리되어 increase() 안에 있는 함수가 모두 완료되기 까지 기다리지 않는다.</p>\n<p>콜백 안에 또 콜백을 넣어서 구현할 수 있는데, 여러번 반복될 경우 가독성이 나빠진다 ⇒ 콜백 지옥</p>\n<h2>Promise</h2>\n<p>콜백 지옥과 같은 코드가 형성되지 않게 ES6에 새로 도입된 방안</p>\n<p>동기적으로 보이는 비동기 처리 방식</p>\n<p>Promise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setTimeout</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 50보다 높으면 에러 발생</span>\n\t\t\t\t<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NumberTooBig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number 값에 + 10 후 성공 처리</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Promise에서 resolve된 값은 .then을 통해 받아 올 수 있음</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"여기다\"</span><span class=\"token punctuation\">,</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 또 다시 .then으로 처리 가능하다.</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 도중에 에러가 발생한다면 .catch를 통해 알 수 있음</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여러 작업을 연달아 처리할 때 함수를 여러번 감싸는 것이 아니라 .then을 사용하여 그 다음 작업을 설정한다.</p>\n<h2>async / await</h2>\n<p>Promise를 더욱 쉽게 사용할 수 있게 해주는 ES8(ES2017) 문법</p>\n<p>비동기 작업의 동기 처리를 해준다.</p>\n<p>함수의 앞 부분에 <code class=\"language-text\">async</code> 키워드를 추가하고, 함수 내부에서 Promise 앞 부분에 <code class=\"language-text\">await</code> 키워드를 사용한다.</p>\n<p>⇒ Promise가 끝날 때까지 기다리고, 결과 값을 특정 변수에 담을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setTimeout</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 50보다 높으면 에러 발생</span>\n\t\t\t\t<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NumberTooBig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number 값에 + 10 후 성공 처리</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tresult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tresult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//promise</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token comment\">// async/await 사용</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Axios</h2>\n<p>→ Promise API를 활용하는 HTTP 비동기 통신 라이브러리</p>\n<p>결과 값으로 Promise 객체를 받게 되는데, 데이터를 받아오지 못하고 줄거야 라는 약속만 해 놓은 상태이다.</p>\n<p>데이터를 받기 위해서는 axios.get 전에 데이터가 올 때까지 기다리겠다는 명령을 해야 하는데, 그 명령어가 await이다.</p>\n<p>Promise가 처리되길 기다리는 동안엔 엔진이 다른 일 (다른 스크립트 실행, 이벤트 처리 등)을 할 수 있기 때문에 CPU 리소스가 낭비되지 않는다.</p>\n<ol>\n<li>Axios는 운영환경에 따라서 브라우저간 XMLHttpRequest 객체 또는 Node.js의 HTTP API를 사용한다.</li>\n<li>Promise(ES6)를 사용. (promise가 상태를 관리하여 다른 코드가 비동기적으로 실행될 수 있도록 만드는 객체.)</li>\n<li>요청(Request) 응답 (reply)을 JSON 형태로 자동 변경</li>\n</ol>\n<h2>React hook (비동기 처리)</h2>\n<p>react에서 비동기 처리를 편하게 하기 위해 제공하는 훅이 잇다.</p>\n<ol>\n<li>\n<p>useState : 변수의 상태를 추적한다.</p>\n<p>변수의 내용이 변하면 자동으로 jsx가 재렌더링 되어 변화된 변수가 화면에 반영된다.</p>\n<p>useState를 사용하지 않으면 스크립트 내부에서 변수에 변화가 있어도 jsx는 변화를 감지하지 못해 항상 초기 상태만 표시하게 된다.</p>\n</li>\n<li>\n<p>useEffect : 변수의 상태를 추적해 작업을 한다.</p>\n<p>변수를 추적해 변화가 생긴다면 어떠한 기능을 수행할 수 있게 한다.</p>\n</li>\n</ol>\n<hr>\n<p><strong>참고</strong></p>\n<p><a href=\"https://bum-developer.tistory.com/entry/React-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-Promise-async-await\">https://bum-developer.tistory.com/entry/React-비동기-작업콜백-함수-Promise-async-await</a></p>","categories":["Study","Javascript","React"],"date":"June 28, 2023","description":"[Javascript] 비동기 작업","id":"e1ab1d18-63e5-5a49-b064-90c51cc22a79","keywords":["Javascript","React"],"slug":"/asynchrony/","title":"비동기 작업","readingTime":{"text":"8 min read"}},{"banner":null,"body":"<h1>ES Module</h1>\n<h2>ES Module</h2>\n<p>→ ES6(ECMAScript : 자바스크립트를 표준화하기 위해 만들어진 스크립트 프로그래밍 언어)에 도입된 모듈 시스템</p>\n<p>→ import, export를 사용해 분리된 자바스크립트 파일끼리 서로 접근할 수 있다.</p>\n<h2>사용하는 이유</h2>\n<h3>기존의 문제점</h3>\n<ol>\n<li>jQuery가 생겨나고 어플리케이션의 규모가 커지면서 script 파일을 나누기 시작했고, 파일 간의 변수, 함수 등을 전달하고 받는 방법이 필요함</li>\n<li>ESM 이전에는 각각의 script 파일을 전역 scope 처럼 사용했다. HTML 파일 보다 위에 있는 script 파일은 저녁 스코프처럼 하위의 script 태그에서 접근, 변경이 가능했다</li>\n<li>때문에 jQuery script를 최상단에 두고, 순서를 올바르게 구성하는 것이 중요했다.</li>\n</ol>\n<h3>모듈화</h3>\n<p>위의 문제들로 인해 모듈화의 필요성이 높아져 ES Module이 등장했다.</p>\n<p>모듈은 함수와 변수를 모듈 스코프에 넣고, 각 함수는 함수 스코프를 가진다.</p>\n<p>export로 해당 변수, 함수를 다른 모듈에서 import를 통해 의존할 수 있도록 지정할 수 있다.</p>\n<h3>Node.js에서의 ESM</h3>\n<p>nodejs는 브라우저보다 빨리 모듈화를 위한 대책을 마련하였다.</p>\n<p>ex) CommonJS, AMD, Webpack-Babel 등</p>\n<h2>ESM 동작</h2>\n<p>브라우저의 자바스크립트는 파일 자체를 사용할 수 없고, 모듈 레코드라고 하는 데이터 구조로 변환해야 한다. (해당 파일들의 모든 구문을 분석해야 한다.)</p>\n<p>파일을 불러오는 것은 HTML 명세를 따라 loader가 한다.</p>\n<p>script 태그에 type = “module”을 적어 entry 파일로 지정한다.</p>\n<ol>\n<li>구성</li>\n</ol>\n<p>Loader : entry 파일부터 import 문을 찾아가며 필요한 모든 파일을 모듈 레코드로 구문 분석한다.\n2. 인스턴스화</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export된 값을 모두 배치하기 위해 메모리 공간을 찾는다.\n\nexport와 import들이 이런 메모리 공간을 가리키도록 한다. ( → linking) : 공간을 찾고 지정할 뿐 실제 값을 채우진 않음</code></pre></div>\n<ol start=\"3\">\n<li>\n<p>평가</p>\n<p>코드를 실행하여 메모리를 변수의 실제 값으로 채운다.</p>\n</li>\n</ol>\n<h2>사용 방법</h2>\n<h3>named export</h3>\n<ol>\n<li>내보내고자 하는 변수, 함수 앞에 export 붙이기</li>\n<li>묶어서 내보내기</li>\n</ol>\n<h3>default export</h3>\n<ol>\n<li>\n<p>내보내고자 하는 변수, 함수 앞에 export default 붙이기</p>\n<ol>\n<li>default export는 모듈 당 하나만 가능하다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 변수값은 default로 선언, 내보내기가 동시에 되지 않는다</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// xx</span>\n\n<span class=\"token comment\">// fn.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Class.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>선언 후 내보내기</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//a.js</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> a\n\n<span class=\"token comment\">// fn.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> fn\n\n<span class=\"token comment\">// Class.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Class</code></pre></div>\n<h3>named export를 import 하는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'a.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>fn<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fn.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Class<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class.js'</span></code></pre></div>\n<h3>default export를 import하는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> a <span class=\"token keyword\">from</span> <span class=\"token string\">'a.js'</span>\n<span class=\"token keyword\">import</span> fn <span class=\"token keyword\">from</span> <span class=\"token string\">'fn.js'</span>\n<span class=\"token keyword\">import</span> Class <span class=\"token keyword\">from</span> <span class=\"token string\">'class.js'</span>\n\n<span class=\"token comment\">//default의 경우 변수명은 원하는대로 바꿔도 된다.</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token constant\">DD</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class.js'</span></code></pre></div>\n</li>\n</ol>\n<hr>\n<p><strong>참고</strong></p>\n<p><a href=\"https://velog.io/@jjunyjjuny/ES-Modules-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0\">https://velog.io/@jjunyjjuny/ES-Modules-정리하기</a></p>\n<p><a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/</a></p>","categories":["Study","Javascript"],"date":"June 25, 2023","description":"[Javascript] ECMA Module이란","id":"8da8475a-44b8-5a32-a0c8-7caea1c5a6f6","keywords":["Javascript","Module System"],"slug":"/esm/","title":"ESM","readingTime":{"text":"5 min read"}},{"banner":null,"body":"<h1>Suspense</h1>\n<p>React v18.0 에서 새로 도입된 기능이다.</p>\n<p>Suspense 를 통해 컴포넌트의 렌더링을 어떤 작업이 끝날 때까지 잠시 중단시키고, 다른 컴포넌트를 먼저 렌더링할 수 있다.</p>\n<p>Suspense는 어떤 컴포넌트가 읽어야 할 데이터가 아직 준비되어 있지 않다는 것을 리엑트에게 알려준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SampleList</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>컴포넌트를 Suspense로 감싸주었을 경우, 컴포넌트의 렌더링을 특정 작업 이후로 미루고, 특정 작업이 이루어질 동안 fallback 속성으로 넘긴 Loading 컴포넌트를 대신 보여줄 수 있다.</p>\n<p>간단히, Suspense는 Promise를 캐싱한다.</p>\n<p>Suspense는 pending 상태일 때 children를 실행시키지 않고 fallback을 반환한다. 때문에 waterfall 현상이 발생할 수 있다.</p>\n<p>때문에, 무조건 좋은 기능이라고 Suspense를 남용할 경우 네트워크 병목 현상으로 인해 어플리케이션 로딩 성능이 저하될 수 있다.</p>\n<p>Suspense를 사용하면서 한 컴포넌트에 두 개 이상의 요청을 할 경우, network waterfall 이 발생하기 때문에 이를 지양해야 한다.</p>\n<p>→ useQueries를 사용하여 필요한 요청을 병렬로 처리한다</p>\n<p>이 방법의 경우 tanstack/react-query v4.15.0부터 useQueries에서 suspense와 error Boundaries를 제공하기 때문에 버전을 고려하며 다시 확인이 필요한 해결 방법이다.</p>\n<p>→ 두 개 이상의 요청이 이루어지는 컴포넌트를 한 컴포넌트에 하나의 요청만 이루어지도록 구분한 후 한 suspense로 감싸준다.</p>","categories":["Study","React"],"date":"June 25, 2023","description":"[React] Suspense란","id":"b738e650-ddfb-5cb3-bd04-94b85b69b3f2","keywords":["React"],"slug":"/suspense/","title":"Suspense","readingTime":{"text":"3 min read"}},{"banner":null,"body":"<h1>Webpack</h1>\n<p>메모: 모듈 번들러</p>\n<h2>웹팩이란?</h2>\n<p>웹팩은 모듈 번들러로, 모듈 번들러는 JavaScript 모듈(JavaScript modules)을 브라우저에서 실행할 수 있는 단일 JavaScript 파일로 묶는 데 사용되는 도구이다.</p>\n<p>module: 각 리소스 파일</p>\n<p>bundle: 웹팩 실행 후에 나오는 결과 파일로 여러개의 모듈로 만들어진다</p>\n<h3>웹팩이 필요한 이유</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript_file_1.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        &lt;script src=\"javascript_file_2.js“ />\n        // ...\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript_file_999.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n// ...\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>하나의 html에 많은 자바스크립트 파일을 포함하는 경우, 계속 늘어나는 js 파일을 관리하기 힘들고, 실행 순수를 신경써야 하고, 기존에 생성된 전역 변수를 덮어쓰지 않도록 신경써야 한다.</p>\n<p>Webpack을 사용하면 이러한 고민없이 여러가지 리소스를 전달하기 좋은 형태로 만들 수 있다.</p>\n<h2>웹팩 실행</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> webpack-init\n<span class=\"token builtin class-name\">cd</span> webpack-init\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli</code></pre></div>\n<p>→ webpack-cli를 사용하면 CLI에서 웹팩을 실행 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/util.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sayHello <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mike'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> webpack //웹팩 실행</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">project\n  ㄴdist\n    ㄴmain.js\n  ㄴnode_modules\n  ㄴsrc</code></pre></div>\n<ol>\n<li>웹팩을 실행하면 dist 폴더가 만들어지고 그 밑에 main.js 번들 파일이 생성된다.</li>\n<li>index.js 모듈과 util.js 모듈이 main.js로 번들링 된다.</li>\n<li>별 다른 설정 없이 웹팩을 실행하면 ./src/index.js 모듈을 입력으로 받아서 ./dist/main.js 번들 파일을 생성한다.</li>\n</ol>\n<h3>설정 파일 이용</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//프로젝트 루트에 webpack.config.js 파일을 생성한다.</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//프로덕션 모드: 코드 압축을 포함한 여러 최적화 기능이 들어감</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//압축 X</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>entry : 웹팩으로 번들링 할 파일 지정</li>\n<li>output : 웹팩 실행으로 만들어지는 번들의 위치와 이름을 설정</li>\n<li>mode: 'production' : 프로덕션모드는 코드압축을 포함한 여러 최적화 기능이 들어감</li>\n<li>minimizer : [] : 압축을 하지않도록 설정하여 번들파일 ( 내용을 쉽게확인 하기 위해서 사용 )</li>\n</ul>\n<h3>웹팩이 생성한 번들 파일의 내용</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">modules</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">//번들 파일 전체가 즉시 실행함수로 묶여있다</span>\n   <span class=\"token comment\">// -------------- 웹팩 런타임 코드 start ----------------</span>\n        <span class=\"token keyword\">var</span> installedModules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">moduleId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n        __webpack_require__<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> modules<span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> installedModules<span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">d</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> getter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">r</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> mode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">n</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">o</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> property</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span>__webpack_require__<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// -------------- 웹팩 런타임 코드 finish ----------------</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// -------------- 우리가 작성한 코드 start ----------------</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mike'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">// -------------- 우리가 작성한 코드 finish ----------------</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>번들 파일 전체가 즉시 실행함수로 묶여있다</li>\n<li>웹팩 런타임 코드: 모듈을 관리, 설정파일(webpack.config.js)에서 entry 파일을 여러개 입력하면 각 entry에 의해 생성되는 번들 파일에는 웹팩 런타임 코드가 들어간다</li>\n<li>우리가 작성한 코드는 즉시 실행 함수의 매개변수로 입력된다</li>\n<li>전역 변수를 사용하는지, 어떤 모듈 시스템을 사용하는지의 여부에 따라 번들파일의 내용은 달라질 수 있다</li>\n</ol>\n<h3>loader 사용하기</h3>\n<p>loader는 모듈을 입력으로 받아서 원하는 형태로 변환한 후 새로운 모듈이 출력해 주는 함수이다.</p>\n<p>자바스크립트파일, 이미지 파일, css 파일, csv 파일 등 모든 파일은 모듈이 될 수 있다.</p>\n<ul>\n<li>\n<p>babel-loader</p>\n<ul>\n<li>\n<p>loader 사용하는 프로젝트 생성 및 필요한 패키지 설치 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> webpack-loader\n<span class=\"token builtin class-name\">cd</span> webpack-loader\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli\n \n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> babel-loader @babel/core @babel/preset-react react react-dom</code></pre></div>\n<p>⇒ jsx 문법으로 작성된 리액트 코드를 처리하기 위해 필요한 패키지들을 설치한다.</p>\n</li>\n<li>\n<p>jsx 문법을 사용한 자바스크립트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./babel.config.js</span>\n<span class=\"token keyword\">const</span> presets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/prset-react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> presets <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>⇒ 프로젝트 루트에 @babel/preset-react를 사용하도록 설정한다.</p>\n</li>\n<li>\n<p>webpack.config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>     \n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>         \n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span><span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>js 확장자를 갖는 모듈은 babel-loader가 처리하도록 설정</li>\n<li>웹팩 실행해보면 dist 폴더 및에 main.js 파일 생성</li>\n</ol>\n</li>\n</ul>\n<h2>웹팩으로 파일 처리</h2>\n<p>아래의 상태로 웹팩을 실행하면 CSS 모듈을 처리하는 로더가 없어서 에러가 발생하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/App.css</span>\n<span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> 1px solid blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/index.js</span>\n<span class=\"token keyword\">import</span> Style <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.css'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Style <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>css 모듈을 처리하기 위한 로더 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> css-loader</code></pre></div>\n<ul>\n<li>\n<p>webpack.config.js 파일에 다음 코드 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<ul>\n<li>css 확장자를 갖는 파일은 css-loader를 사용하도록 설정</li>\n<li>웹팩을 실행해보면 에러가 발생하지 않음</li>\n<li>하지만 index.html 파일을 브라우저에서 실행해보면 돔 요소의 스타일은 변경되지 않음</li>\n</ul>\n</li>\n<li>\n<p>스타일을 적용하기 위한 style-loader 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> style-loader</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<ul>\n<li>로더를 배열로 입력하면 오른쪽 로더부터 실행</li>\n<li>style-loader는 css-loader가 생성한 css 데이터를 style 태그로 만들어서 번들파일이 브라우저에서 실행될 때 HTML head에 삽입</li>\n<li>번들파일이 실행되다가 에러가 발생하면 style태그가 삽입되지 않을 수 있다</li>\n</ul>\n</li>\n</ul>\n<h3>기타 파일 처리하기</h3>\n<ol>\n<li>임의의 PNG 파일을 src 폴더 밑에 icon.png 로 저장</li>\n<li>src 폴더 밑에 data.txt 파일 만들고 아무 내용이나 입력</li>\n<li>src 폴더 밑에 data.json 파일 만들고 아무 내용이나 입력</li>\n<li>src 폴더 밑에 index.js에 아래 내용 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ./src/data.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ireh\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/index.js</span>\n<span class=\"token keyword\">import</span> Icon <span class=\"token keyword\">from</span> <span class=\"token string\">'./icon.png'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Json <span class=\"token keyword\">from</span> <span class=\"token string\">'./data.json'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Text <span class=\"token keyword\">from</span> <span class=\"token string\">'./data.txt'</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">webpack example</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            div></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Json<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, age:{Json.age}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">text: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Icon<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Style <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>⇒ JSON, TXT, PNG 모듈 사용</p>\n<p>JSON 모듈은 웹팩에서 기본적으로 처리해 주기 때문에 별도의 로더를 설치하지 않아도 된다.</p>\n<p>txt, png 모듈은 패키지를 설치해야 한다.</p>\n<p><code class=\"language-text\">npm install file-loader raw-loader</code></p>\n<ol>\n<li>file-loader는 모듈의 내용을 그대로 복사하여 dist 폴더 밑에 복사본을 생성한다.</li>\n<li>모듈을 사용하는 쪽에는 해당 모듈의 경로를 넘겨준다.</li>\n<li>row-loader(txt 확장자 처리)는 모듈의 내용을 그래도 자바스크립트 코드로 가져온다.</li>\n<li>웹팩 실행 후 dist 폴더에 생성된 이미지 파일의 이름에는 해시값이 포함되어 이미지 파이을 수정하는 경우에만 변경되기 때문에 브라우저의 캐싱 효과를 활용할 수 있다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.txt$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'raw-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<h3>이미지 파일 요청 횟수 줄이기</h3>\n<p>번들 파일에 이미지 파일이 포함되면 브라우저의 파일 요청 횟수를 줄일 수 있지만, 번들 파일이 너무 커지면 자바스크립트가 늦게 실행되므로 작은 이미지 파일만 포함시키는 것이 좋다.</p>\n<p><code class=\"language-text\">npm install url-loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>          \n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token number\">8192</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<ul>\n<li>\n<p>url-loader는 파일 크기가 option.limit 값보다 작은 경우에만 번들 파일에 파일의 내용을 포함시킨다.</p>\n<p>→ limit 값이 파일보다 크면 번들 파일인 main.js에 데이터가 입력된다.</p>\n</li>\n<li>\n<p>더 큰 경우에는 다른 로더가 처리할 수 있도록 fallback 함수를 제공한다.</p>\n</li>\n<li>\n<p>fallback 함수를 입력하지 않으면 기본적으로 file-loader가 처리한다.</p>\n</li>\n</ul>\n<h3>플러그인 사용</h3>\n<p>로더는 특정 모듈에 대한 처리만 담당하고, 플러그인은 웹팩이 실행되는 전체 과정에 개입할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].[chunkhash].js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token literal-property property\">preset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>chunkhash를 사용하면 파일의 내용이 수정될 때마다 파일 이름이 변경되도록 할 수 있다.</p>\n<p>자바스크립트 모듈을 처리하도록 babel-loader를 설정한다.</p>\n</li>\n<li>\n<p>html-webpack-plugin</p>\n<ul>\n<li>웹팩을 실행해서 나오는 결과물을 확인하기 위해서 HTML 파일을 수동으로 작성해야 한다.</li>\n<li>위와 같이 설정하면. 번들 파일이 변경될 때마다 번들 파일의 이름이 변경되므로 HTML 파일의 내용도 수정해야 한다.</li>\n</ul>\n<p>⇒ 이를 자동으로 해주는 플로그인이다.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">npm install clean-webpack-plugin html-webpack-pugin</code></p>\n<p>(clean-webpack-plugin은 웹팩을 실행할 때마다 dist 폴더를 정리해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CleanWebpackPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'./template/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<ul>\n<li>\n<p>index.html 파일이 자동으로 생성되도록 html-webpack-plugin을 설정한다.</p>\n</li>\n<li>\n<p>원하는 형태를 기반으로 index.html 파일이 생성되도록 template 옵션을 설정한다.</p>\n<p>(프로젝트 루트에 template/index.html 생성해줘야한다.)</p>\n<p>→ 필요한 태그를 이 파일에 추가하면 html-webpack-plugin이 생성하는 새로운 HTML 파일에 같이 포함된다. 웹팩을 실행하면 dist 폴더 밑에 index.html 파일이 생성된다.</p>\n</li>\n</ul>\n<h2>번들 파일 최적화</h2>\n<h3>Tree Shaking</h3>\n<p>: 필요 없는 코드들을 제거해주어 번들 파일의 크기나 번들링의 시간을 줄여주는 작업</p>\n<p>기본적으로 웹팩에서 불필요한 코드를 제거해 주는 기능을 제공하지만, 제대로 동작하지 않을 수 있다.</p>\n<p>이 때, tree shaking를 잘 이해하고 있어야 번들 파일 크기를 최소로 유지한다.</p>\n<ul>\n<li>tree shaking이 동작하지 않는 경우\n<ul>\n<li>사용하는 모듈이 ESM(ECMAScript Modules)이 아닌 경우</li>\n<li>동적 임포트(Dynamic import) 를 사용하는 경우</li>\n</ul>\n</li>\n</ul>\n<p>외부 패키지에 대해서도 tree shaking이 적용되나, 외부 패키지는 다양한 방식의 모듈 시스템을 사용하기 때문에 제대로 동작하지 않을 수 있다.</p>\n<h2>코드 분할</h2>\n<p>어플리케이션의 전체 코드를 하나의 번들 파일로 만드는 것은 렌더링이 오래 걸리고, 응답시간을 최소화할 수 있다.</p>\n<p>⇒ 코드 분할하는 가장 직관적인 방법은 웹팩의 entry 설정값에 페이지별로 입력하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">page1</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index1.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">page2</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index2.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>각 페이지의 자바스크립트 파일을 entry로 입력한다</p>\n</li>\n<li>\n<p>dist 폴더를 정리하기 위해 clean-webpack-plugin을 사용한다</p>\n<p>웹팩을 실행하면 dist/page1.js dist/page2.js 두파일이 생성된다</p>\n</li>\n<li>\n<p>하지만 두 파일 모두 같은 내용을 포함하고 있기 때문에 둘다 가지고 있는것은 비효율적</p>\n</li>\n</ul>\n<h3>SplitChunks Plugin</h3>\n<p>웹팩에서는 코드 분할을 위해 기본적으로 SplitChunksPlugin을 ㄴ장하고 있다.</p>\n<p>별도의 패키지 설치 없이 설정파일을 수정하여 코드 분할을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//...</span>\n<span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">page1</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index1.js'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendor'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<ul>\n<li>\n<p>optimization의 splitChunks속성을 이용하면 코드를 분할할 수 있다.</p>\n</li>\n<li>\n<p>chunks 속성의 기본값은 동적 임포트만 분할하는 async, 동적임포트가 아니더라도 코드가 분할되도록 all로 설정한다.</p>\n</li>\n<li>\n<p>웹팩을 빌드하면</p>\n<ul>\n<li><strong>로다시와 리액트 모듈은 vendor.js파일로 만들어진다</strong></li>\n<li>add함수를 가지고 있는 <strong>util.js 모듈은 파일의 크기가 작기 때문에 page1.js 파일에 포함된다</strong></li>\n</ul>\n</li>\n<li>\n<p>SplitChunk의 속성</p>\n<ul>\n<li>async : 동적 임포트만 코드를 분할하도록 설정되어 있다</li>\n<li>30000 : 파일크기가 30kb 이상인 모듈만 분할 대상으로 한다</li>\n<li>minChunks: 1 : 한개 이상의 chunk에 포함되어 있어야 한다\n<ul>\n<li>chunk : 웹팩에서 내부적으로 사용되는 용어인데 대개 번들파일이라고 이해해도 괜찮다</li>\n</ul>\n</li>\n<li>cacheGroups : 파일분할은 그룹별로 이루어진다\n<ul>\n<li>기본적으로 vendor(외부모듈)과 default(내부모듈) 두 그룹으로 설정되어 있다</li>\n<li>vendor(외부모듈)은 내부모듈보다 비교적 낮은 비율로 코드가 변경되기 때문에 브라우저에 오래 캐싱될 수 있다는 장점이 있다</li>\n<li>default(내부모듈)은 두개이상의 번들파일에 포함되어야 분할 된다</li>\n</ul>\n</li>\n</ul>\n<p>→ 리액트 패키지는 별도록 불할되도록 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">cacheGroups</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">vendors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">reactBundle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'react.bundle'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">minSize</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n</li>\n</ul>\n<h3>동적 임포트</h3>\n<p>: 동적으로 모듈을 가져올 수 있는 기능</p>\n<p>웹팩에서 동적 임포트를 사용하면 해당 모듈의 코드는 자동으로 분할된다.</p>\n<p>utils.js, lodash를 동적으로 임포트해서 사용하는 index3.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> _ <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ import 함수롤 사용하여 동적으로 모듈을 가져오고, import 함수는 프로미스 객체를 반환하기 때문에 then 메서드로 연결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CleanWebpackPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">page3</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index3.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//index3.js 파일의 번들링을 위해</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">chukFilename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].chunk.js'</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>chunkFilename 속성을 이용해서 동적 임포트로 만들어지는 번들파일의 이름을 설정한다</li>\n<li>웹팩을 실행하면 page3.js, 1.chunk.js, 2.chunk.js 세 파일이 생성된다</li>\n<li>1.chunk.js 파일에는 util.js 모듈의 코드가 들어가고</li>\n<li>2.chunk.js 파일에는 로다시 모듈의 코드가 들어간다\n<ul>\n<li>근데 거꾸로 들어감</li>\n</ul>\n</li>\n<li>웹팩 런타임 코드는 page3.js 파일에만 들어 간다</li>\n</ul>\n<h3>Prefetch, Preload</h3>\n<ul>\n<li>Prefetch : 가까운 미래에 필요한 파일이라고 브라우저에게 알려주는 기능이다.\n<ul>\n<li>prepatch로 설정된 파일은 브라우저가 바쁘지 않을 때 미리 다운로드 된다.</li>\n<li>prefetch는 lazy loading의 단점을 보완한다.</li>\n</ul>\n</li>\n<li>Preload : 지금 당장 필요한 파일이라고 브라우저에게 알려주는 기능\n<ul>\n<li>HTML에서 preload로 설정된 파일은 첫 페이지 로딩 시 즉시 다운로드 된다.</li>\n<li>preload를 남발하면 첫 페이지 로딩 속도에 부정적인 영향을 줄 수 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> _ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPreload: true */</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>chunk.js : 'lodash'</li>\n<li>chunks.js : './util'</li>\n</ol>\n<p>로 분할 되어 있다. 웹팩을 실행하면,</p>\n<ul>\n<li>chunk.js 파일은 prefetch가 적용됨</li>\n<li>link 태그는 page3.js 파일이 실행되면서 웹팩에 의해서 삽입된다</li>\n<li>script 태그는 myFunc 함수가 실행될 때 웹팩에 의해서 삽입된다</li>\n<li>따라서 script 태그보다 link 태그가 먼저 삽입된다</li>\n</ul>\n<hr>","categories":["Study","Javascript"],"date":"June 23, 2023","description":"Webpack이란","id":"6ea49ef2-eee9-5679-8849-014f93595a84","keywords":["Javascript"],"slug":"/webpack/","title":"Webpack","readingTime":{"text":"20 min read"}},{"banner":null,"body":"<h2>Heap</h2>\n<ul>\n<li>완전 이진 트리의 일종으로 Priority Queue를 위해 만들어진 자료구조이다.</li>\n<li>다익스트라 알고리즘(최단 거리 구하기 알고리즘) 에서 최소 비용을 기반으로 그래프를 탐색 할 때도 heap을 사용한다.</li>\n<li>여러 개의 값들 중 최댓값 또는 최솟값을 빠르게 찾을 수 있다.</li>\n<li>중복된 값을 허용한다.</li>\n<li>시간 복잡도\n<ul>\n<li>꺼내기 : O(1)</li>\n<li>삽입 : O(logn)</li>\n<li>삭제 : O(logn)</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>max heap (최대 힙)</li>\n</ol>\n<p>부모 노드의 키 값이 자식 노드의 키 값보다 크거나 같은 완전 이진 트리   ->  key(부모 노드) >= key(자식 노드)</p>\n<ol start=\"3\">\n<li>min heap (최소 힙)</li>\n</ol>\n<p>부모 노드의 키 값이 자식 노드의 키 값보다 작거나 같은 완전 이진 트리   ->  key(부모 노드) &#x3C;= key(자식 노드)</p>\n<h2>heap 구현</h2>\n<p>배열을 사용하여 heap을 구현한다. 우선순위 큐를 만들기 위해 min heap을 구현할 예정이다.</p>\n<p><strong>힙에서의 부모 노드와 자식 노드의 관계</strong>\n-> 왼쪽 자식의 인덱스 = (부모의 인덱스) * 2\n-> 오른쪽 자식의 인덱스 = (부모의 인덱스) * 2 + 1\n-> 부모의 인덱스 = (자식의 인덱스) / 2</p>\n<h3>기본 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">getLeftChildIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token function-variable function\">getRightChildIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token function-variable function\">getParentIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">childIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>childIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function-variable function\">peek</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 항상 최상위 노드가 peek 가 된다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>삽입</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 우선순위를 비교하기 위해서 key, value 로 받는다.</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 객체로 node 를 만들고</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token comment\">// push 한다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 배열에 가장 끝에 넣고, 다시 min heap 의 형태를 갖추도록 한다.</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">/**\n  *최근에 삽입한 노드가 min heap 의 형태를 갖추도록 자리를 찾아주는 함수\n  **/</span>\n  <span class=\"token function-variable function\">heapifyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 계속해서 변하는 index 값</span>\n    <span class=\"token keyword\">const</span> lastInsertedNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 최근에 삽입된 노드의 정보</span>\n\n    <span class=\"token comment\">// 루트노드가 되기 전까지</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> parentIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParentIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 부모 노드의 key 값이 마지막에 삽입된 노드의 키 값 보다 크다면</span>\n      <span class=\"token comment\">// 부모의 자리를 계속해서 아래로 내린다.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">></span> lastInsertedNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span>\n        index <span class=\"token operator\">=</span> parentIndex\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// break 를 만나서 자신의 자리를 찾은 상황</span>\n    <span class=\"token comment\">// 마지막에 찾아진 곳이 가장 나중에 들어온 노드가 들어갈 자리다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lastInsertedNode\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>삭제</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">const</span> rootNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 끝에 있는 노드를 부모로 만들고</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 다시 min heap 의 형태를 갖추도록 한다.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> rootNode\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// 변경된 루트노드가 제 자리를 찾아가도록 하는 메소드</span>\n  <span class=\"token function-variable function\">heapifyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">const</span> rootNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// 계속해서 left child 가 있을 때 까지 검사한다.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLeftChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> leftChildIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLeftChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> rightChildIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRightChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 왼쪽, 오른쪽 중에 더 작은 노드를 찾는다</span>\n      <span class=\"token comment\">// rightChild 가 있다면 key의 값을 비교해서 더 작은 값을 찾는다.</span>\n      <span class=\"token comment\">// 없다면 leftChild 가 더 작은 값을 가지는 인덱스가 된다.</span>\n      <span class=\"token keyword\">const</span> smallerChildIndex <span class=\"token operator\">=</span>\n        rightChildIndex <span class=\"token operator\">&lt;</span> count <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key\n          <span class=\"token operator\">?</span> rightChildIndex\n          <span class=\"token operator\">:</span> leftChildIndex\n\n      <span class=\"token comment\">// 자식 노드의 키 값이 루트노드보다 작다면 위로 끌어올린다.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>smallerChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;=</span> rootNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>smallerChildIndex<span class=\"token punctuation\">]</span>\n        index <span class=\"token operator\">=</span> smallerChildIndex\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rootNode\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>Priority Queue</h2>\n<ul>\n<li>비선형 자료구조이다. (트리 구조)</li>\n<li>우선순위를 가진 데이터들을 저장하는 큐이다.</li>\n<li>우선순위 큐 삽입/삭제 시간 복잡도 : 𝑂(𝑙𝑜𝑔𝑁)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//min heap에 넣기</span>\n  <span class=\"token function-variable function\">enqueue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">priority<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//min heap에서 삭제 (우선순위가 가장 높은 노드 꺼내기)</span>\n  <span class=\"token function-variable function\">dequeue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//heap이 비었는지 </span>\n  <span class=\"token function-variable function\">isEmpty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>[참고]\n<a href=\"https://jun-choi-4928.medium.com/javascript%EB%A1%9C-heap-priority-queue-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-8bc13bf095d9\">https://jun-choi-4928.medium.com/javascript%EB%A1%9C-heap-priority-queue-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-8bc13bf095d9</a></p>","categories":["Study","Algorithm","자료구조"],"date":"June 11, 2023","description":"[Algorithm] Heap|Priority Queue 이란","id":"d5d7611e-484f-51ad-8a1a-cbe4a0a44abc","keywords":["Algorithm","자료구조","Heap","PriorityQueue"],"slug":"/heap/","title":"Heap | Priority Queue","readingTime":{"text":"6 min read"}},{"banner":null,"body":"<h2>해시테이블 (Hash Table)</h2>\n<ul>\n<li>해시 테이블은 (Key, Value)식으로 데이터를 저장하는 자료구조 중 하나이다.</li>\n<li>시간 복잡도는 O(1)이다.</li>\n<li>해시 테이블은 Key 값을 해시 함수를 사용하여 변환한 값을 index로 한다.  =>  이를 해싱(Hashing) 이라고 한다.</li>\n<li>기존 자료구조인 이진탐색트리나 배열에 비해 굉장히 빠른 속도를 갖는다.</li>\n</ul>\n<h2>해시 함수 (Hash Function)</h2>\n<p>해시 함수에서 가장 중요한 것은 고유한 인덱스이다. 인덱스가 중복되면 충돌(Collision)이 발생한다.</p>\n<p>해시 함수의 특징으로는\n-> 일관성이 있어야 한다. (같은 key에는 항상 같은 value가 나와야 한다.)\n-> 다른 데이터가 들어오면 다른 해시값이 나와야 한다.</p>\n<p>해시 테이블에 사용되는 대표적인 해시 알고리즘으로는,</p>\n<ol>\n<li>Division Method</li>\n</ol>\n<p>숫자 Key를 테이블의 크기로 나누어 나온 나머지를 인덱스로 사용한다.\n2. Digit Folding\nKey의 문자열을 ASCII 코드로 바꾸고 그 값을 합해서 테이블 내의 주소로 사용한다.\n4. Multiplication Method\nindex = (숫자로 된 Key 값 * 0과 1 사이의 실수 mod 1) * 2의 제곱수\n등이 있다.</p>\n<h2>충돌</h2>\n<p>해시 함수는 서로 다른 데이터일 때, 서로 다른 해시값을 반환해야 한다.\n하지만 정확히 충돌이 없는 해시 함수를 만드는 것은 거의 불가능하다.</p>\n<p>따라서 발생할 수 있는 충돌 현상을 방지하기 위해,</p>\n<ol>\n<li>Separate Chaining (분리 연결법)</li>\n</ol>\n<ul>\n<li>동일한 버킷의 데이터에 대해 추가 메모리를 사용해서 다음 데이터의 주소를 저장한다.</li>\n<li>링크드 리스트 데이터 구조를 활용한다.</li>\n<li>해시 테이블의 확장이 필요없다.</li>\n<li>데이터의 수가 많아지면 동일한 버킷에 chaining되는 데이터가 많아져서 효율성이 떨어진다.</li>\n<li>ex) 한 버킷은 거대한 연결 리스트가 존재하는데, 그 버킷 빼고 모두 비어있다면 결국 해시 테이블이 느려진다. => O(n)</li>\n</ul>\n<ol start=\"2\">\n<li>Open Addressing (개방 주소법)</li>\n</ol>\n<ul>\n<li>비어있는 해시테이블의 공간을 활용한다.</li>\n<li>지정한 메모리 외 추가적인 저장 공간이 필요 없다.</li>\n<li>insert, delete 시 오버헤드가 적다.</li>\n<li>비어있는 해시를 찾는 규칙\n<ol>\n<li>Linear Probing ( 선형 탐색 ) : 고정폭 만큼 이동하여 차례대로 빈 버킷을 검색한다.</li>\n</ol>\n-> 특정 해시값 주변 버킷이 모두 채워져 있는 primary clustering(연속된 데이터 그룹이 생기는 현상) 문제에 취약하다.\n-> 탐색을 여러번 해야 하는 경우가 생긴다.\n-> 탐색 간격을 1 이외의 테이블의 크기 값과 서로소 관계에 있는 소수로 정해야 클러스터링 현상을 줄일 수 있다.\n2. Quadratic Proving ( 제곱 탑색 ) : 고정폭이 아니고 폭을 제곱수로 이동하여 빈 버킷을 검색한다.\n-> 선형 탐색보다 클러스터링이 적게 일어나지만, 여러개의 서로 다른 키들이 동일한 초기 해값을 갖는 secondary clustering 문제에 취약하다.\n-> 즉, 처음 충돌한 위치가 같다면 다음 충돌할 위치에서도 반복적으로 계속 충돌이 일어난다.\n3. Double Hasinh ( 이중 해시 ) : 다른 해시 함수를 한번 더 적용해서 다온 해시를 통해 데이터 저장\n-> 두 개의 해시 함수를 준비해서 하나는 최초의 해시값을 얻을 때, 또 다른 하나는 해시 충돌이 일어났을 때 탐색 이동폭을 얻기 위해 사용한다.\n-> 최초 해시값이 같더라도 탐색 이동폭이 달라지고, 탐색 이동폭이 같더라도 최초 해시값이 달라져서 위의 문제들이 해결된다.\n-> 위의 두 방법들보다 연산 수행이 많다.</li>\n</ul>\n<ol start=\"3\">\n<li>Resizing</li>\n</ol>\n<ul>\n<li>위의 두 방법으로도 효율성이 좋아지지 않는다면, 버킷의 개수를 확장해야 한다.</li>\n<li>더 큰 버킷을 가지는 배열을 새로 생성하여, 새로운 배열에 기존 데이터의 해시값을 다시 계산해서 복사한다.</li>\n</ul>\n<h3>자바스크립트로 해시 테이블 구현</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//  string 자료형의 key에 해당하는 공간에 string 자료형의 value를 집어넣은 것</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">[</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Kelly\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">[</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Park\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Hash Table 생성</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span> <span class=\"token punctuation\">{</span>\n  table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 해시 테이블 사이즈에 바로 접근 할 수 있도록 변수 생성, setItem 할 때마다</span>\n  <span class=\"token comment\">// numItem++되어 table에 들어있는 개수를 그때 그때 반영</span>\n  <span class=\"token comment\">//  이 값을 활용하여, table의 길이 대비 현재 들어있는 값의 개수를 연산해 </span>\n  <span class=\"token comment\">// 특정 수준 이상으로 값이 할당이 되면 table의 길이를 늘림</span>\n  numItems <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">setItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numItems<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// table 원소 개수가 80%이상 차있는 경우 resize()</span>\n    <span class=\"token keyword\">const</span> loadFactor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numItems <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">>=</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 만약 배열의 크기를 3에서 6으로 두 배를 했다면, 그보다 큰 소수인 7을 새로운 table의 크기로 설정해주는 것이다.</span>\n  <span class=\"token function-variable function\">resize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        item<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> newTable<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// getItem에서도 값을 가져오기 원하는 key를 해시 함수로 변환해서 table[3]의 값을 리턴하도록 한다.</span>\n  <span class=\"token function-variable function\">getItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 값이 없는 경우 null;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 단순히 전체 table의 index로 접근 = O(1) but array.find를 사용하면 O(n)으로 증가함</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2.  해시 함수(Hash Function)가 필요한 이유</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> tableSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// return 3; 항상 table[3] index 중복 해시 충돌 발생</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13</span> <span class=\"token operator\">*</span> hash <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 생성자 함수 생성 new HashTable();</span>\n<span class=\"token keyword\">const</span> myTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kelly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Kelly</span>\n\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Park\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"birth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2000-00-00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"birth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>resize 함수로 배열 크기가 80%가 차면 새로운 배열을 만들어 주는 걸 볼 수 있다.</p>\n<p>브루트 포스 (완전 탐색)으로는 시간 초과에 빠지는 문제에서 해시를 적용한다.</p>\n<hr>\n<p>[참고]\n<a href=\"https://algoroot.tistory.com/56\">https://algoroot.tistory.com/56</a></p>","categories":["Study","Algorithm","자료구조"],"date":"June 06, 2023","description":"[Algorithm] Hash Table 이란","id":"a6802658-bcd1-5ffc-af0a-5e9c557e90cc","keywords":["Algorithm","자료구조","HashTable"],"slug":"/hash-table/","title":"HashTable","readingTime":{"text":"9 min read"}},{"banner":null,"body":"<h1>성능 최적화</h1>\n<h2>Rerendering 방지</h2>\n<p>컴포넌트 리렌더링 되는 조건은</p>\n<ol>\n<li>전달받은 props가 변경될 때</li>\n<li>부모 컴포넌트가 리렌더링 될 때</li>\n<li>자신의 state가 변경될 때</li>\n</ol>\n<p>이다.</p>\n<h3>useMemo</h3>\n<p>컴포넌트가 리렌더링 될 때마다 함수도 리렌더링 되는데, 리렌더링할 때마다 실행 시간이 오래 걸리는 함수를 연산된 값을 <code class=\"language-text\">useMemo</code>라는 Hook 을 사용하여 재사용할 수 있다.</p>\n<p>⇒ memoization : 기존에 수행한 연산의 결과값을 어딘가에 저장해두고 동일한 입력이 들어오면 재활용하는 프로그래밍 기법. memoization을 절적히 적용하면 중복 연산을 피할 수 있기 때문에 메모리를 조금 더 쓰더라도 애플리케이션의 성능을 최적화할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useMemo</code>는 의존성이 변경되었을 때에만 메모이제이션된 값만 다시 계산한다.</p>\n<p>단, useMemo를 남용하면 단점이 있다.</p>\n<ol>\n<li>컴포넌트의 복잡도가 올라가 코드 가독성이 떨어지고, 따라서 유지보수가 어려워진다.</li>\n<li>useMemo가 적용된 레퍼런스는 재활용을 위해 가비지 컬렉션에서 제외되기 때문에 메모리를 더 쓴다.</li>\n</ol>\n<h3>React.memo 컴포넌트 메모이제이션</h3>\n<p>useMemo와 달리 hook이 아니므로 클래스 컴포넌트에도 적용이 가능하다.</p>\n<p>컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정하여 함수형 컴포넌트의 리렌더링 성능을 최적화한다.</p>\n<p>React.memo는 콜백함수를 이용해 메모이제이션을 적용할지 여부를 판단할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* props를 사용하여 렌더링 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>useCallback</h3>\n<p>useMemo가 리턴되는 값을 memoize 시켜주었는데, useMemo와 비슷한 useCallback은 함수 선언을 memoize 하는데 사용된다.</p>\n<p>자식 컴포넌트에 함수를 넘겨줄 때 새로 생성된 함수를 넘겨주면, 자식 컴포넌트를 React.memo로 감쌌어도 전달된 함수 props이 다른 참조 값을 가지므로 props가 변경된 것으로 인식하고 리렌더링을 한다. 이를 방지하기 위해 useCallback을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3><strong>자식 컴포넌트의 props로 객체를 넘겨줄 경우 변형 X</strong></h3>\n<p>자식 컴포넌트의 props로 전달할 때 형태에 주의해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 생성자 함수</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">prop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Obj</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// 객체 리터럴</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">prop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">property</span><span class=\"token operator\">:</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>새로 생성된 객체가 props로 들어가므로 컴포넌트가 리렌더링 될 때마다 새로운 객체가 생성되어 자식 컴포넌트로 전달된다.</p>\n<p>생성자 함수나 객체 리터럴로 객체를 생성해서 하위 컴포넌트로 넘겨주는 방식이 아닌, state를 그대로 하위컴포넌트에 넘겨주어 필요한 데이터 가공을 그 하위컴포넌트에서 해주는 것이 좋다.</p>\n<h3>key 값에 index 사용 X</h3>\n<p>어떤 배열에 중간에 어떤 요소가 삽입될때 그 중간 이후에 위치한 요소들은 전부 index가 변경된다.</p>\n<p>그러면 key 값이 변경되면서 React는 key가 동일 할 경우, 동일한 DOM Element를 보여주기 때문에 예상치 못한 문제가 발생할 수 있다.</p>","categories":["Study","React"],"date":"June 06, 2023","description":"리액트 최적화 방법","id":"c96a98d1-acf8-5ec3-b8e2-6b7545c94254","keywords":["React"],"slug":"/react_-optimization/","title":"리액트 최적화","readingTime":{"text":"5 min read"}},{"banner":null,"body":"<h1>Vite</h1>\n<p>설명: ESbuild를 기반으로 만들어진 프론트엔드 빌드툴</p>\n<h2>CRA</h2>\n<p>리액트 팀이 추천하는 공식 리액트 보일러 툴.</p>\n<p>React 프로젝트를 생성할 때 대부분 Create React App (CRA) 를 통해 생성했다.</p>\n<p>CRA는 Webpack을 사용하는데, 여기서 Webpack은 자바스크립트 코드로 구성된 툴을 뜻한다.</p>\n<p>자바스크립트는 Interpreted 언어(소스코드를 기계어로 컴파일하지 않고 명령어를 바로 해석하여 실행하는 언어 : 실행할 때 해석하면서 실행한다.)이기 때문에 느리다.</p>\n<p>때문에 개발자들은 Go와 같은 low-level language를 활용하여 자바스크립트 툴을 창조했고, 그렇게 생겨난게 Esbuild이다.</p>\n<p><strong>Esbuild</strong>는 Go로 작성된 자바스크립트 빌드툴로 빠르다.</p>\n<h2>Vite</h2>\n<p>Vite는 Esbuild를 기반으로 만들어진 프론트엔드 빌드툴이다.</p>\n<p>브라우저에서의 Native ES 모듈 활용과 compile-to-native 언어로 작성된 자바스크립트 툴 이라는 새로운 발전을 통해 더 나은 개발자 경험을 제공한다.</p>\n<p>ES 모듈 활용으로 인해 자바스크립트 코드를 모두 bundle할 필요 없이 브라우저에서 자바스크립트 어플리케이션을 작동할 수 있다.</p>\n<ul>\n<li>핵심은 ES 모듈을 사용하여 브라우저가 필요로 하는 어플리케이션 코드의 일부분만 변환하고 제공한다.</li>\n</ul>\n<h3>자바스크립트 모듈</h3>\n<p>개발 모드로 빌드를 할 때, Vite는 자바스크립트 모듈을 두 가지 카테고리로 나눈다.</p>\n<ol>\n<li>의존성 모듈</li>\n</ol>\n<p>node_modules 폴더로부터 import 되는 자바스크립트 모듈 → 개발하는 동안엔 자주 바뀌지 않는 편</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vite의 사전 번들링 기능은 esbuild를 사용하여 처리 된다. 때문에 기존 번들러 대비 빠른 번들링 속도를 보인다.\n\n→ webpack은 브라우저의 요청 이전에 모든 자바스크립트 모듈을 처리하지만, vite는 브라우저 요청 전에 의존성 모듈만 미리 번들링한다.</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>소스 코드</p>\n<p><code class=\"language-text\">.jsx</code>,<code class=\"language-text\">.vue</code> ,<code class=\"language-text\">.scss</code>와 같은 라이브러리 관련 확장자를 포함할 수 있고, 자주 수정되는 파일이다</p>\n<p>Vite는 native <a href=\"https://www.notion.so/ES-Module-45b27aa32fcc4971a43f8a0e13976ef1?pvs=21\">ESM</a>을 통해 소스코드를 제공한다. → 이는 브라우저로 하여금 번들러의 작업 일부를 넘겨 받게 한다.</p>\n<p>Vite는 브라우저의 요청이 있을때만 소스코드를 변환하고 제공한다.</p>\n</li>\n</ol>\n<h3>HMR</h3>\n<p>HMR은 나머지 페이지에 영향을 끼치지 않고, 특정 모듈만 즉시 반영 될 수 있도록 해준다.</p>\n<p>하지만 프로젝트 크기가 커지면, HMR의 시간 또한 길어지므로 생산성 저하로 이어지게 된다.</p>\n<p>Vite는 네이티브 ESM을 기반으로 HMR을 구현하기 때문에 다른 번들링 툴보다 우위에 있다고 할 수 있다.</p>\n<p>모듈이 수정되면, Vite는 수정된 모듈과 관련된 부분만을 교체하고, 브라우저에서 해당 모듈을 요청하면 교체된 모듈을 전달한다.</p>\n<hr>\n<p><strong>참조</strong></p>\n<p><a href=\"https://velog.io/@jaewoneee/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%B3%B4%EC%9D%BC%EB%9F%AC%ED%94%8C%EB%A0%88%EC%9D%B4%ED%8A%B8-Create-React-App-vs-Vite\">https://velog.io/@jaewoneee/리액트-보일러플레이트-Create-React-App-vs-Vite</a></p>\n<p><a href=\"https://velog.io/@ho2yahh/React-CRA%EB%A5%BC-100%EB%B0%B0-%EB%B9%A0%EB%A5%B8-Vite%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\">https://velog.io/@ho2yahh/React-CRA를-100배-빠른-Vite로-바꾸기</a></p>","categories":["Study","Javascript"],"date":"June 06, 2023","description":"[Javascript] Vite란","id":"eb599869-3c4a-561e-9b75-4fb3b5121075","keywords":["Javascript","React","ESM"],"slug":"/vite/","title":"Vite","readingTime":{"text":"5 min read"}}]}},"staticQueryHashes":["3262260831","948380417"],"slicesMap":{}}