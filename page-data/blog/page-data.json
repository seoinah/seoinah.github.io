{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-listing-index-tsx","path":"/blog/","result":{"pageContext":{"articles":[{"banner":null,"body":"<h2>Heap</h2>\n<ul>\n<li>완전 이진 트리의 일종으로 Priority Queue를 위해 만들어진 자료구조이다.</li>\n<li>다익스트라 알고리즘(최단 거리 구하기 알고리즘) 에서 최소 비용을 기반으로 그래프를 탐색 할 때도 heap을 사용한다.</li>\n<li>여러 개의 값들 중 최댓값 또는 최솟값을 빠르게 찾을 수 있다.</li>\n<li>중복된 값을 허용한다.</li>\n<li>시간 복잡도\n<ul>\n<li>꺼내기 : O(1)</li>\n<li>삽입 : O(logn)</li>\n<li>삭제 : O(logn)</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>max heap (최대 힙)</li>\n</ol>\n<p>부모 노드의 키 값이 자식 노드의 키 값보다 크거나 같은 완전 이진 트리   ->  key(부모 노드) >= key(자식 노드)</p>\n<ol start=\"3\">\n<li>min heap (최소 힙)</li>\n</ol>\n<p>부모 노드의 키 값이 자식 노드의 키 값보다 작거나 같은 완전 이진 트리   ->  key(부모 노드) &#x3C;= key(자식 노드)</p>\n<h2>heap 구현</h2>\n<p>배열을 사용하여 heap을 구현한다. 우선순위 큐를 만들기 위해 min heap을 구현할 예정이다.</p>\n<p><strong>힙에서의 부모 노드와 자식 노드의 관계</strong>\n-> 왼쪽 자식의 인덱스 = (부모의 인덱스) * 2\n-> 오른쪽 자식의 인덱스 = (부모의 인덱스) * 2 + 1\n-> 부모의 인덱스 = (자식의 인덱스) / 2</p>\n<h3>기본 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">getLeftChildIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token function-variable function\">getRightChildIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token function-variable function\">getParentIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">childIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>childIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function-variable function\">peek</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 항상 최상위 노드가 peek 가 된다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>삽입</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 우선순위를 비교하기 위해서 key, value 로 받는다.</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 객체로 node 를 만들고</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token comment\">// push 한다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 배열에 가장 끝에 넣고, 다시 min heap 의 형태를 갖추도록 한다.</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">/**\n  *최근에 삽입한 노드가 min heap 의 형태를 갖추도록 자리를 찾아주는 함수\n  **/</span>\n  <span class=\"token function-variable function\">heapifyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 계속해서 변하는 index 값</span>\n    <span class=\"token keyword\">const</span> lastInsertedNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 최근에 삽입된 노드의 정보</span>\n\n    <span class=\"token comment\">// 루트노드가 되기 전까지</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> parentIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParentIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 부모 노드의 key 값이 마지막에 삽입된 노드의 키 값 보다 크다면</span>\n      <span class=\"token comment\">// 부모의 자리를 계속해서 아래로 내린다.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">></span> lastInsertedNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span>\n        index <span class=\"token operator\">=</span> parentIndex\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// break 를 만나서 자신의 자리를 찾은 상황</span>\n    <span class=\"token comment\">// 마지막에 찾아진 곳이 가장 나중에 들어온 노드가 들어갈 자리다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lastInsertedNode\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>삭제</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">const</span> rootNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 끝에 있는 노드를 부모로 만들고</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 다시 min heap 의 형태를 갖추도록 한다.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> rootNode\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// 변경된 루트노드가 제 자리를 찾아가도록 하는 메소드</span>\n  <span class=\"token function-variable function\">heapifyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">const</span> rootNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// 계속해서 left child 가 있을 때 까지 검사한다.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLeftChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> leftChildIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLeftChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> rightChildIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRightChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 왼쪽, 오른쪽 중에 더 작은 노드를 찾는다</span>\n      <span class=\"token comment\">// rightChild 가 있다면 key의 값을 비교해서 더 작은 값을 찾는다.</span>\n      <span class=\"token comment\">// 없다면 leftChild 가 더 작은 값을 가지는 인덱스가 된다.</span>\n      <span class=\"token keyword\">const</span> smallerChildIndex <span class=\"token operator\">=</span>\n        rightChildIndex <span class=\"token operator\">&lt;</span> count <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key\n          <span class=\"token operator\">?</span> rightChildIndex\n          <span class=\"token operator\">:</span> leftChildIndex\n\n      <span class=\"token comment\">// 자식 노드의 키 값이 루트노드보다 작다면 위로 끌어올린다.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>smallerChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;=</span> rootNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>smallerChildIndex<span class=\"token punctuation\">]</span>\n        index <span class=\"token operator\">=</span> smallerChildIndex\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rootNode\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>Priority Queue</h2>\n<ul>\n<li>비선형 자료구조이다. (트리 구조)</li>\n<li>우선순위를 가진 데이터들을 저장하는 큐이다.</li>\n<li>우선순위 큐 삽입/삭제 시간 복잡도 : 𝑂(𝑙𝑜𝑔𝑁)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//min heap에 넣기</span>\n  <span class=\"token function-variable function\">enqueue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">priority<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//min heap에서 삭제 (우선순위가 가장 높은 노드 꺼내기)</span>\n  <span class=\"token function-variable function\">dequeue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//heap이 비었는지 </span>\n  <span class=\"token function-variable function\">isEmpty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>[참고]\n<a href=\"https://jun-choi-4928.medium.com/javascript%EB%A1%9C-heap-priority-queue-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-8bc13bf095d9\">https://jun-choi-4928.medium.com/javascript%EB%A1%9C-heap-priority-queue-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-8bc13bf095d9</a></p>","categories":["Study","Algorithm","자료구조"],"date":"June 11, 2023","description":"[Algorithm] Heap|Priority Queue 이란","id":"d5d7611e-484f-51ad-8a1a-cbe4a0a44abc","keywords":["Algorithm","자료구조","Heap","PriorityQueue"],"slug":"/heap/","title":"Heap | Priority Queue","readingTime":{"text":"6 min read"}},{"banner":null,"body":"<h2>해시테이블 (Hash Table)</h2>\n<ul>\n<li>해시 테이블은 (Key, Value)식으로 데이터를 저장하는 자료구조 중 하나이다.</li>\n<li>시간 복잡도는 O(1)이다.</li>\n<li>해시 테이블은 Key 값을 해시 함수를 사용하여 변환한 값을 index로 한다.  =>  이를 해싱(Hashing) 이라고 한다.</li>\n<li>기존 자료구조인 이진탐색트리나 배열에 비해 굉장히 빠른 속도를 갖는다.</li>\n</ul>\n<h2>해시 함수 (Hash Function)</h2>\n<p>해시 함수에서 가장 중요한 것은 고유한 인덱스이다. 인덱스가 중복되면 충돌(Collision)이 발생한다.</p>\n<p>해시 함수의 특징으로는\n-> 일관성이 있어야 한다. (같은 key에는 항상 같은 value가 나와야 한다.)\n-> 다른 데이터가 들어오면 다른 해시값이 나와야 한다.</p>\n<p>해시 테이블에 사용되는 대표적인 해시 알고리즘으로는,</p>\n<ol>\n<li>Division Method</li>\n</ol>\n<p>숫자 Key를 테이블의 크기로 나누어 나온 나머지를 인덱스로 사용한다.\n2. Digit Folding\nKey의 문자열을 ASCII 코드로 바꾸고 그 값을 합해서 테이블 내의 주소로 사용한다.\n4. Multiplication Method\nindex = (숫자로 된 Key 값 * 0과 1 사이의 실수 mod 1) * 2의 제곱수\n등이 있다.</p>\n<h2>충돌</h2>\n<p>해시 함수는 서로 다른 데이터일 때, 서로 다른 해시값을 반환해야 한다.\n하지만 정확히 충돌이 없는 해시 함수를 만드는 것은 거의 불가능하다.</p>\n<p>따라서 발생할 수 있는 충돌 현상을 방지하기 위해,</p>\n<ol>\n<li>Separate Chaining (분리 연결법)</li>\n</ol>\n<ul>\n<li>동일한 버킷의 데이터에 대해 추가 메모리를 사용해서 다음 데이터의 주소를 저장한다.</li>\n<li>링크드 리스트 데이터 구조를 활용한다.</li>\n<li>해시 테이블의 확장이 필요없다.</li>\n<li>데이터의 수가 많아지면 동일한 버킷에 chaining되는 데이터가 많아져서 효율성이 떨어진다.</li>\n<li>ex) 한 버킷은 거대한 연결 리스트가 존재하는데, 그 버킷 빼고 모두 비어있다면 결국 해시 테이블이 느려진다. => O(n)</li>\n</ul>\n<ol start=\"2\">\n<li>Open Addressing (개방 주소법)</li>\n</ol>\n<ul>\n<li>비어있는 해시테이블의 공간을 활용한다.</li>\n<li>지정한 메모리 외 추가적인 저장 공간이 필요 없다.</li>\n<li>insert, delete 시 오버헤드가 적다.</li>\n<li>비어있는 해시를 찾는 규칙\n<ol>\n<li>Linear Probing ( 선형 탐색 ) : 고정폭 만큼 이동하여 차례대로 빈 버킷을 검색한다.</li>\n</ol>\n-> 특정 해시값 주변 버킷이 모두 채워져 있는 primary clustering(연속된 데이터 그룹이 생기는 현상) 문제에 취약하다.\n-> 탐색을 여러번 해야 하는 경우가 생긴다.\n-> 탐색 간격을 1 이외의 테이블의 크기 값과 서로소 관계에 있는 소수로 정해야 클러스터링 현상을 줄일 수 있다.\n2. Quadratic Proving ( 제곱 탑색 ) : 고정폭이 아니고 폭을 제곱수로 이동하여 빈 버킷을 검색한다.\n-> 선형 탐색보다 클러스터링이 적게 일어나지만, 여러개의 서로 다른 키들이 동일한 초기 해값을 갖는 secondary clustering 문제에 취약하다.\n-> 즉, 처음 충돌한 위치가 같다면 다음 충돌할 위치에서도 반복적으로 계속 충돌이 일어난다.\n3. Double Hasinh ( 이중 해시 ) : 다른 해시 함수를 한번 더 적용해서 다온 해시를 통해 데이터 저장\n-> 두 개의 해시 함수를 준비해서 하나는 최초의 해시값을 얻을 때, 또 다른 하나는 해시 충돌이 일어났을 때 탐색 이동폭을 얻기 위해 사용한다.\n-> 최초 해시값이 같더라도 탐색 이동폭이 달라지고, 탐색 이동폭이 같더라도 최초 해시값이 달라져서 위의 문제들이 해결된다.\n-> 위의 두 방법들보다 연산 수행이 많다.</li>\n</ul>\n<ol start=\"3\">\n<li>Resizing</li>\n</ol>\n<ul>\n<li>위의 두 방법으로도 효율성이 좋아지지 않는다면, 버킷의 개수를 확장해야 한다.</li>\n<li>더 큰 버킷을 가지는 배열을 새로 생성하여, 새로운 배열에 기존 데이터의 해시값을 다시 계산해서 복사한다.</li>\n</ul>\n<h3>자바스크립트로 해시 테이블 구현</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//  string 자료형의 key에 해당하는 공간에 string 자료형의 value를 집어넣은 것</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">[</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Kelly\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">[</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Park\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Hash Table 생성</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span> <span class=\"token punctuation\">{</span>\n  table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 해시 테이블 사이즈에 바로 접근 할 수 있도록 변수 생성, setItem 할 때마다</span>\n  <span class=\"token comment\">// numItem++되어 table에 들어있는 개수를 그때 그때 반영</span>\n  <span class=\"token comment\">//  이 값을 활용하여, table의 길이 대비 현재 들어있는 값의 개수를 연산해 </span>\n  <span class=\"token comment\">// 특정 수준 이상으로 값이 할당이 되면 table의 길이를 늘림</span>\n  numItems <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">setItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numItems<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// table 원소 개수가 80%이상 차있는 경우 resize()</span>\n    <span class=\"token keyword\">const</span> loadFactor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numItems <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">>=</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 만약 배열의 크기를 3에서 6으로 두 배를 했다면, 그보다 큰 소수인 7을 새로운 table의 크기로 설정해주는 것이다.</span>\n  <span class=\"token function-variable function\">resize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        item<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> newTable<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// getItem에서도 값을 가져오기 원하는 key를 해시 함수로 변환해서 table[3]의 값을 리턴하도록 한다.</span>\n  <span class=\"token function-variable function\">getItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 값이 없는 경우 null;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 단순히 전체 table의 index로 접근 = O(1) but array.find를 사용하면 O(n)으로 증가함</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2.  해시 함수(Hash Function)가 필요한 이유</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hashStringToInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> tableSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// return 3; 항상 table[3] index 중복 해시 충돌 발생</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13</span> <span class=\"token operator\">*</span> hash <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 생성자 함수 생성 new HashTable();</span>\n<span class=\"token keyword\">const</span> myTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kelly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Kelly</span>\n\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Park\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyTable<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"birth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2000-00-00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myTable<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"birth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>resize 함수로 배열 크기가 80%가 차면 새로운 배열을 만들어 주는 걸 볼 수 있다.</p>\n<p>브루트 포스 (완전 탐색)으로는 시간 초과에 빠지는 문제에서 해시를 적용한다.</p>\n<hr>\n<p>[참고]\n<a href=\"https://algoroot.tistory.com/56\">https://algoroot.tistory.com/56</a></p>","categories":["Study","Algorithm","자료구조"],"date":"June 06, 2023","description":"[Algorithm] Hash Table 이란","id":"a6802658-bcd1-5ffc-af0a-5e9c557e90cc","keywords":["Algorithm","자료구조","HashTable"],"slug":"/hash-table/","title":"HashTable","readingTime":{"text":"9 min read"}}]}},"staticQueryHashes":["3262260831","948380417"],"slicesMap":{}}