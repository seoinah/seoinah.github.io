{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/webpack/","result":{"pageContext":{"article":{"banner":null,"body":"<h1>Webpack</h1>\n<p>메모: 모듈 번들러</p>\n<h2>웹팩이란?</h2>\n<p>웹팩은 모듈 번들러로, 모듈 번들러는 JavaScript 모듈(JavaScript modules)을 브라우저에서 실행할 수 있는 단일 JavaScript 파일로 묶는 데 사용되는 도구이다.</p>\n<p>module: 각 리소스 파일</p>\n<p>bundle: 웹팩 실행 후에 나오는 결과 파일로 여러개의 모듈로 만들어진다</p>\n<h3>웹팩이 필요한 이유</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript_file_1.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        &lt;script src=\"javascript_file_2.js“ />\n        // ...\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript_file_999.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n// ...\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>하나의 html에 많은 자바스크립트 파일을 포함하는 경우, 계속 늘어나는 js 파일을 관리하기 힘들고, 실행 순수를 신경써야 하고, 기존에 생성된 전역 변수를 덮어쓰지 않도록 신경써야 한다.</p>\n<p>Webpack을 사용하면 이러한 고민없이 여러가지 리소스를 전달하기 좋은 형태로 만들 수 있다.</p>\n<h2>웹팩 실행</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> webpack-init\n<span class=\"token builtin class-name\">cd</span> webpack-init\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli</code></pre></div>\n<p>→ webpack-cli를 사용하면 CLI에서 웹팩을 실행 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/util.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sayHello <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mike'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> webpack //웹팩 실행</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">project\n  ㄴdist\n    ㄴmain.js\n  ㄴnode_modules\n  ㄴsrc</code></pre></div>\n<ol>\n<li>웹팩을 실행하면 dist 폴더가 만들어지고 그 밑에 main.js 번들 파일이 생성된다.</li>\n<li>index.js 모듈과 util.js 모듈이 main.js로 번들링 된다.</li>\n<li>별 다른 설정 없이 웹팩을 실행하면 ./src/index.js 모듈을 입력으로 받아서 ./dist/main.js 번들 파일을 생성한다.</li>\n</ol>\n<h3>설정 파일 이용</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//프로젝트 루트에 webpack.config.js 파일을 생성한다.</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//프로덕션 모드: 코드 압축을 포함한 여러 최적화 기능이 들어감</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//압축 X</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>entry : 웹팩으로 번들링 할 파일 지정</li>\n<li>output : 웹팩 실행으로 만들어지는 번들의 위치와 이름을 설정</li>\n<li>mode: 'production' : 프로덕션모드는 코드압축을 포함한 여러 최적화 기능이 들어감</li>\n<li>minimizer : [] : 압축을 하지않도록 설정하여 번들파일 ( 내용을 쉽게확인 하기 위해서 사용 )</li>\n</ul>\n<h3>웹팩이 생성한 번들 파일의 내용</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">modules</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">//번들 파일 전체가 즉시 실행함수로 묶여있다</span>\n   <span class=\"token comment\">// -------------- 웹팩 런타임 코드 start ----------------</span>\n        <span class=\"token keyword\">var</span> installedModules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">moduleId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n        __webpack_require__<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> modules<span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> installedModules<span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">d</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> getter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">r</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> mode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">n</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">o</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> property</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        __webpack_require__<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span>__webpack_require__<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// -------------- 웹팩 런타임 코드 finish ----------------</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// -------------- 우리가 작성한 코드 start ----------------</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mike'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">// -------------- 우리가 작성한 코드 finish ----------------</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>번들 파일 전체가 즉시 실행함수로 묶여있다</li>\n<li>웹팩 런타임 코드: 모듈을 관리, 설정파일(webpack.config.js)에서 entry 파일을 여러개 입력하면 각 entry에 의해 생성되는 번들 파일에는 웹팩 런타임 코드가 들어간다</li>\n<li>우리가 작성한 코드는 즉시 실행 함수의 매개변수로 입력된다</li>\n<li>전역 변수를 사용하는지, 어떤 모듈 시스템을 사용하는지의 여부에 따라 번들파일의 내용은 달라질 수 있다</li>\n</ol>\n<h3>loader 사용하기</h3>\n<p>loader는 모듈을 입력으로 받아서 원하는 형태로 변환한 후 새로운 모듈이 출력해 주는 함수이다.</p>\n<p>자바스크립트파일, 이미지 파일, css 파일, csv 파일 등 모든 파일은 모듈이 될 수 있다.</p>\n<ul>\n<li>\n<p>babel-loader</p>\n<ul>\n<li>\n<p>loader 사용하는 프로젝트 생성 및 필요한 패키지 설치 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> webpack-loader\n<span class=\"token builtin class-name\">cd</span> webpack-loader\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli\n \n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> babel-loader @babel/core @babel/preset-react react react-dom</code></pre></div>\n<p>⇒ jsx 문법으로 작성된 리액트 코드를 처리하기 위해 필요한 패키지들을 설치한다.</p>\n</li>\n<li>\n<p>jsx 문법을 사용한 자바스크립트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./babel.config.js</span>\n<span class=\"token keyword\">const</span> presets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/prset-react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> presets <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>⇒ 프로젝트 루트에 @babel/preset-react를 사용하도록 설정한다.</p>\n</li>\n<li>\n<p>webpack.config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>     \n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>         \n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span><span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>js 확장자를 갖는 모듈은 babel-loader가 처리하도록 설정</li>\n<li>웹팩 실행해보면 dist 폴더 및에 main.js 파일 생성</li>\n</ol>\n</li>\n</ul>\n<h2>웹팩으로 파일 처리</h2>\n<p>아래의 상태로 웹팩을 실행하면 CSS 모듈을 처리하는 로더가 없어서 에러가 발생하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/App.css</span>\n<span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> 1px solid blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/index.js</span>\n<span class=\"token keyword\">import</span> Style <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.css'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Style <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>css 모듈을 처리하기 위한 로더 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> css-loader</code></pre></div>\n<ul>\n<li>\n<p>webpack.config.js 파일에 다음 코드 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<ul>\n<li>css 확장자를 갖는 파일은 css-loader를 사용하도록 설정</li>\n<li>웹팩을 실행해보면 에러가 발생하지 않음</li>\n<li>하지만 index.html 파일을 브라우저에서 실행해보면 돔 요소의 스타일은 변경되지 않음</li>\n</ul>\n</li>\n<li>\n<p>스타일을 적용하기 위한 style-loader 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> style-loader</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<ul>\n<li>로더를 배열로 입력하면 오른쪽 로더부터 실행</li>\n<li>style-loader는 css-loader가 생성한 css 데이터를 style 태그로 만들어서 번들파일이 브라우저에서 실행될 때 HTML head에 삽입</li>\n<li>번들파일이 실행되다가 에러가 발생하면 style태그가 삽입되지 않을 수 있다</li>\n</ul>\n</li>\n</ul>\n<h3>기타 파일 처리하기</h3>\n<ol>\n<li>임의의 PNG 파일을 src 폴더 밑에 icon.png 로 저장</li>\n<li>src 폴더 밑에 data.txt 파일 만들고 아무 내용이나 입력</li>\n<li>src 폴더 밑에 data.json 파일 만들고 아무 내용이나 입력</li>\n<li>src 폴더 밑에 index.js에 아래 내용 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ./src/data.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ireh\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/index.js</span>\n<span class=\"token keyword\">import</span> Icon <span class=\"token keyword\">from</span> <span class=\"token string\">'./icon.png'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Json <span class=\"token keyword\">from</span> <span class=\"token string\">'./data.json'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Text <span class=\"token keyword\">from</span> <span class=\"token string\">'./data.txt'</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">webpack example</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            div></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Json<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, age:{Json.age}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">text: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Icon<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Style <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>⇒ JSON, TXT, PNG 모듈 사용</p>\n<p>JSON 모듈은 웹팩에서 기본적으로 처리해 주기 때문에 별도의 로더를 설치하지 않아도 된다.</p>\n<p>txt, png 모듈은 패키지를 설치해야 한다.</p>\n<p><code class=\"language-text\">npm install file-loader raw-loader</code></p>\n<ol>\n<li>file-loader는 모듈의 내용을 그대로 복사하여 dist 폴더 밑에 복사본을 생성한다.</li>\n<li>모듈을 사용하는 쪽에는 해당 모듈의 경로를 넘겨준다.</li>\n<li>row-loader(txt 확장자 처리)는 모듈의 내용을 그래도 자바스크립트 코드로 가져온다.</li>\n<li>웹팩 실행 후 dist 폴더에 생성된 이미지 파일의 이름에는 해시값이 포함되어 이미지 파이을 수정하는 경우에만 변경되기 때문에 브라우저의 캐싱 효과를 활용할 수 있다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.txt$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'raw-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<h3>이미지 파일 요청 횟수 줄이기</h3>\n<p>번들 파일에 이미지 파일이 포함되면 브라우저의 파일 요청 횟수를 줄일 수 있지만, 번들 파일이 너무 커지면 자바스크립트가 늦게 실행되므로 작은 이미지 파일만 포함시키는 것이 좋다.</p>\n<p><code class=\"language-text\">npm install url-loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\">//.... 기존 내용</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>          \n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token number\">8192</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//.. 기존 내용</span></code></pre></div>\n<ul>\n<li>\n<p>url-loader는 파일 크기가 option.limit 값보다 작은 경우에만 번들 파일에 파일의 내용을 포함시킨다.</p>\n<p>→ limit 값이 파일보다 크면 번들 파일인 main.js에 데이터가 입력된다.</p>\n</li>\n<li>\n<p>더 큰 경우에는 다른 로더가 처리할 수 있도록 fallback 함수를 제공한다.</p>\n</li>\n<li>\n<p>fallback 함수를 입력하지 않으면 기본적으로 file-loader가 처리한다.</p>\n</li>\n</ul>\n<h3>플러그인 사용</h3>\n<p>로더는 특정 모듈에 대한 처리만 담당하고, 플러그인은 웹팩이 실행되는 전체 과정에 개입할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./webpack.config.js</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].[chunkhash].js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token literal-property property\">preset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>chunkhash를 사용하면 파일의 내용이 수정될 때마다 파일 이름이 변경되도록 할 수 있다.</p>\n<p>자바스크립트 모듈을 처리하도록 babel-loader를 설정한다.</p>\n</li>\n<li>\n<p>html-webpack-plugin</p>\n<ul>\n<li>웹팩을 실행해서 나오는 결과물을 확인하기 위해서 HTML 파일을 수동으로 작성해야 한다.</li>\n<li>위와 같이 설정하면. 번들 파일이 변경될 때마다 번들 파일의 이름이 변경되므로 HTML 파일의 내용도 수정해야 한다.</li>\n</ul>\n<p>⇒ 이를 자동으로 해주는 플로그인이다.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">npm install clean-webpack-plugin html-webpack-pugin</code></p>\n<p>(clean-webpack-plugin은 웹팩을 실행할 때마다 dist 폴더를 정리해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CleanWebpackPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'./template/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<ul>\n<li>\n<p>index.html 파일이 자동으로 생성되도록 html-webpack-plugin을 설정한다.</p>\n</li>\n<li>\n<p>원하는 형태를 기반으로 index.html 파일이 생성되도록 template 옵션을 설정한다.</p>\n<p>(프로젝트 루트에 template/index.html 생성해줘야한다.)</p>\n<p>→ 필요한 태그를 이 파일에 추가하면 html-webpack-plugin이 생성하는 새로운 HTML 파일에 같이 포함된다. 웹팩을 실행하면 dist 폴더 밑에 index.html 파일이 생성된다.</p>\n</li>\n</ul>\n<h2>번들 파일 최적화</h2>\n<h3>Tree Shaking</h3>\n<p>: 필요 없는 코드들을 제거해주어 번들 파일의 크기나 번들링의 시간을 줄여주는 작업</p>\n<p>기본적으로 웹팩에서 불필요한 코드를 제거해 주는 기능을 제공하지만, 제대로 동작하지 않을 수 있다.</p>\n<p>이 때, tree shaking를 잘 이해하고 있어야 번들 파일 크기를 최소로 유지한다.</p>\n<ul>\n<li>tree shaking이 동작하지 않는 경우\n<ul>\n<li>사용하는 모듈이 ESM(ECMAScript Modules)이 아닌 경우</li>\n<li>동적 임포트(Dynamic import) 를 사용하는 경우</li>\n</ul>\n</li>\n</ul>\n<p>외부 패키지에 대해서도 tree shaking이 적용되나, 외부 패키지는 다양한 방식의 모듈 시스템을 사용하기 때문에 제대로 동작하지 않을 수 있다.</p>\n<h2>코드 분할</h2>\n<p>어플리케이션의 전체 코드를 하나의 번들 파일로 만드는 것은 렌더링이 오래 걸리고, 응답시간을 최소화할 수 있다.</p>\n<p>⇒ 코드 분할하는 가장 직관적인 방법은 웹팩의 entry 설정값에 페이지별로 입력하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">page1</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index1.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">page2</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index2.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>각 페이지의 자바스크립트 파일을 entry로 입력한다</p>\n</li>\n<li>\n<p>dist 폴더를 정리하기 위해 clean-webpack-plugin을 사용한다</p>\n<p>웹팩을 실행하면 dist/page1.js dist/page2.js 두파일이 생성된다</p>\n</li>\n<li>\n<p>하지만 두 파일 모두 같은 내용을 포함하고 있기 때문에 둘다 가지고 있는것은 비효율적</p>\n</li>\n</ul>\n<h3>SplitChunks Plugin</h3>\n<p>웹팩에서는 코드 분할을 위해 기본적으로 SplitChunksPlugin을 ㄴ장하고 있다.</p>\n<p>별도의 패키지 설치 없이 설정파일을 수정하여 코드 분할을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//...</span>\n<span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">page1</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index1.js'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendor'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<ul>\n<li>\n<p>optimization의 splitChunks속성을 이용하면 코드를 분할할 수 있다.</p>\n</li>\n<li>\n<p>chunks 속성의 기본값은 동적 임포트만 분할하는 async, 동적임포트가 아니더라도 코드가 분할되도록 all로 설정한다.</p>\n</li>\n<li>\n<p>웹팩을 빌드하면</p>\n<ul>\n<li><strong>로다시와 리액트 모듈은 vendor.js파일로 만들어진다</strong></li>\n<li>add함수를 가지고 있는 <strong>util.js 모듈은 파일의 크기가 작기 때문에 page1.js 파일에 포함된다</strong></li>\n</ul>\n</li>\n<li>\n<p>SplitChunk의 속성</p>\n<ul>\n<li>async : 동적 임포트만 코드를 분할하도록 설정되어 있다</li>\n<li>30000 : 파일크기가 30kb 이상인 모듈만 분할 대상으로 한다</li>\n<li>minChunks: 1 : 한개 이상의 chunk에 포함되어 있어야 한다\n<ul>\n<li>chunk : 웹팩에서 내부적으로 사용되는 용어인데 대개 번들파일이라고 이해해도 괜찮다</li>\n</ul>\n</li>\n<li>cacheGroups : 파일분할은 그룹별로 이루어진다\n<ul>\n<li>기본적으로 vendor(외부모듈)과 default(내부모듈) 두 그룹으로 설정되어 있다</li>\n<li>vendor(외부모듈)은 내부모듈보다 비교적 낮은 비율로 코드가 변경되기 때문에 브라우저에 오래 캐싱될 수 있다는 장점이 있다</li>\n<li>default(내부모듈)은 두개이상의 번들파일에 포함되어야 분할 된다</li>\n</ul>\n</li>\n</ul>\n<p>→ 리액트 패키지는 별도록 불할되도록 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">cacheGroups</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">vendors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">reactBundle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'react.bundle'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">minSize</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n</li>\n</ul>\n<h3>동적 임포트</h3>\n<p>: 동적으로 모듈을 가져올 수 있는 기능</p>\n<p>웹팩에서 동적 임포트를 사용하면 해당 모듈의 코드는 자동으로 분할된다.</p>\n<p>utils.js, lodash를 동적으로 임포트해서 사용하는 index3.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> _ <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ import 함수롤 사용하여 동적으로 모듈을 가져오고, import 함수는 프로미스 객체를 반환하기 때문에 then 메서드로 연결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CleanWebpackPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">page3</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index3.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//index3.js 파일의 번들링을 위해</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">chukFilename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].chunk.js'</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>chunkFilename 속성을 이용해서 동적 임포트로 만들어지는 번들파일의 이름을 설정한다</li>\n<li>웹팩을 실행하면 page3.js, 1.chunk.js, 2.chunk.js 세 파일이 생성된다</li>\n<li>1.chunk.js 파일에는 util.js 모듈의 코드가 들어가고</li>\n<li>2.chunk.js 파일에는 로다시 모듈의 코드가 들어간다\n<ul>\n<li>근데 거꾸로 들어감</li>\n</ul>\n</li>\n<li>웹팩 런타임 코드는 page3.js 파일에만 들어 간다</li>\n</ul>\n<h3>Prefetch, Preload</h3>\n<ul>\n<li>Prefetch : 가까운 미래에 필요한 파일이라고 브라우저에게 알려주는 기능이다.\n<ul>\n<li>prepatch로 설정된 파일은 브라우저가 바쁘지 않을 때 미리 다운로드 된다.</li>\n<li>prefetch는 lazy loading의 단점을 보완한다.</li>\n</ul>\n</li>\n<li>Preload : 지금 당장 필요한 파일이라고 브라우저에게 알려주는 기능\n<ul>\n<li>HTML에서 preload로 설정된 파일은 첫 페이지 로딩 시 즉시 다운로드 된다.</li>\n<li>preload를 남발하면 첫 페이지 로딩 속도에 부정적인 영향을 줄 수 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> _ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPreload: true */</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>chunk.js : 'lodash'</li>\n<li>chunks.js : './util'</li>\n</ol>\n<p>로 분할 되어 있다. 웹팩을 실행하면,</p>\n<ul>\n<li>chunk.js 파일은 prefetch가 적용됨</li>\n<li>link 태그는 page3.js 파일이 실행되면서 웹팩에 의해서 삽입된다</li>\n<li>script 태그는 myFunc 함수가 실행될 때 웹팩에 의해서 삽입된다</li>\n<li>따라서 script 태그보다 link 태그가 먼저 삽입된다</li>\n</ul>\n<hr>","categories":["Study","Javascript"],"date":"June 23, 2023","description":"Webpack이란","id":"6ea49ef2-eee9-5679-8849-014f93595a84","keywords":["Javascript"],"slug":"/webpack/","title":"Webpack","readingTime":{"text":"20 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["3262260831","948380417"],"slicesMap":{}}