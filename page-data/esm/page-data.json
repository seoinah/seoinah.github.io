{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/esm/","result":{"pageContext":{"article":{"banner":null,"body":"<h1>ES Module</h1>\n<h2>ES Module</h2>\n<p>→ ES6(ECMAScript : 자바스크립트를 표준화하기 위해 만들어진 스크립트 프로그래밍 언어)에 도입된 모듈 시스템</p>\n<p>→ import, export를 사용해 분리된 자바스크립트 파일끼리 서로 접근할 수 있다.</p>\n<h2>사용하는 이유</h2>\n<h3>기존의 문제점</h3>\n<ol>\n<li>jQuery가 생겨나고 어플리케이션의 규모가 커지면서 script 파일을 나누기 시작했고, 파일 간의 변수, 함수 등을 전달하고 받는 방법이 필요함</li>\n<li>ESM 이전에는 각각의 script 파일을 전역 scope 처럼 사용했다. HTML 파일 보다 위에 있는 script 파일은 저녁 스코프처럼 하위의 script 태그에서 접근, 변경이 가능했다</li>\n<li>때문에 jQuery script를 최상단에 두고, 순서를 올바르게 구성하는 것이 중요했다.</li>\n</ol>\n<h3>모듈화</h3>\n<p>위의 문제들로 인해 모듈화의 필요성이 높아져 ES Module이 등장했다.</p>\n<p>모듈은 함수와 변수를 모듈 스코프에 넣고, 각 함수는 함수 스코프를 가진다.</p>\n<p>export로 해당 변수, 함수를 다른 모듈에서 import를 통해 의존할 수 있도록 지정할 수 있다.</p>\n<h3>Node.js에서의 ESM</h3>\n<p>nodejs는 브라우저보다 빨리 모듈화를 위한 대책을 마련하였다.</p>\n<p>ex) CommonJS, AMD, Webpack-Babel 등</p>\n<h2>ESM 동작</h2>\n<p>브라우저의 자바스크립트는 파일 자체를 사용할 수 없고, 모듈 레코드라고 하는 데이터 구조로 변환해야 한다. (해당 파일들의 모든 구문을 분석해야 한다.)</p>\n<p>파일을 불러오는 것은 HTML 명세를 따라 loader가 한다.</p>\n<p>script 태그에 type = “module”을 적어 entry 파일로 지정한다.</p>\n<ol>\n<li>구성</li>\n</ol>\n<p>Loader : entry 파일부터 import 문을 찾아가며 필요한 모든 파일을 모듈 레코드로 구문 분석한다.\n2. 인스턴스화</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export된 값을 모두 배치하기 위해 메모리 공간을 찾는다.\n\nexport와 import들이 이런 메모리 공간을 가리키도록 한다. ( → linking) : 공간을 찾고 지정할 뿐 실제 값을 채우진 않음</code></pre></div>\n<ol start=\"3\">\n<li>\n<p>평가</p>\n<p>코드를 실행하여 메모리를 변수의 실제 값으로 채운다.</p>\n</li>\n</ol>\n<h2>사용 방법</h2>\n<h3>named export</h3>\n<ol>\n<li>내보내고자 하는 변수, 함수 앞에 export 붙이기</li>\n<li>묶어서 내보내기</li>\n</ol>\n<h3>default export</h3>\n<ol>\n<li>\n<p>내보내고자 하는 변수, 함수 앞에 export default 붙이기</p>\n<ol>\n<li>default export는 모듈 당 하나만 가능하다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 변수값은 default로 선언, 내보내기가 동시에 되지 않는다</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// xx</span>\n\n<span class=\"token comment\">// fn.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Class.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>선언 후 내보내기</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//a.js</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> a\n\n<span class=\"token comment\">// fn.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> fn\n\n<span class=\"token comment\">// Class.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Class</code></pre></div>\n<h3>named export를 import 하는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'a.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>fn<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fn.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Class<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class.js'</span></code></pre></div>\n<h3>default export를 import하는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> a <span class=\"token keyword\">from</span> <span class=\"token string\">'a.js'</span>\n<span class=\"token keyword\">import</span> fn <span class=\"token keyword\">from</span> <span class=\"token string\">'fn.js'</span>\n<span class=\"token keyword\">import</span> Class <span class=\"token keyword\">from</span> <span class=\"token string\">'class.js'</span>\n\n<span class=\"token comment\">//default의 경우 변수명은 원하는대로 바꿔도 된다.</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token constant\">DD</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class.js'</span></code></pre></div>\n</li>\n</ol>\n<hr>\n<p><strong>참고</strong></p>\n<p><a href=\"https://velog.io/@jjunyjjuny/ES-Modules-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0\">https://velog.io/@jjunyjjuny/ES-Modules-정리하기</a></p>\n<p><a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/</a></p>","categories":["Study","Javascript"],"date":"June 25, 2023","description":"[Javascript] ECMA Module이란","id":"8da8475a-44b8-5a32-a0c8-7caea1c5a6f6","keywords":["Javascript","자료구조","HashTable"],"slug":"/esm/","title":"ESM","readingTime":{"text":"5 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["3262260831","948380417"],"slicesMap":{}}