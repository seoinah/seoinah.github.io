{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/eslintandprettier/","result":{"pageContext":{"article":{"banner":null,"body":"<h1>ESLint</h1>\n<p>자바스크립트 코드에서 발견된 문제 패턴을 식별하기 위한 정적 코드 분석 도구이다.</p>\n<p>대부분의 프로그래밍 언어에는 컴파일 과정에서 수행되는 Linter가 기본적으로 내정되어 있다.</p>\n<p>하지만 인터프리터 언어인 자바스크립트는 Linter가 내장되어 있지 않다. 때문에 런타임 환경에서 에러가 발생할 확률이 높다.</p>\n<h2>Lint</h2>\n<p>자바스크립트에서는 ESLint와 같은 Linting 도구를 사용한다.</p>\n<p>Lint란 소스코드를 분석하여 문법적인 오류나 스타일적인 오류, 적절하지 않은 구조 등에 표시를 달아주는 행위이며, Linter란 Lint 동작을 도와주는 도구이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 함수 선언문</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 기명 함수 표현식(named function expression)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 익명 함수 표현식(anonymous function expression)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 생성자 함수</span>\n<span class=\"token keyword\">const</span> square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return number * number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 화살표 함수</span>\n<span class=\"token comment\">// 매개변수 지정 방법</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 매개변수가 없을 경우</span>\n     <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다.</span>\n\n<span class=\"token comment\">// 함수 몸체 지정 방법</span>\n<span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// single line block</span>\n<span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x             <span class=\"token comment\">// 함수 몸체가 한줄의 구문이라면 중괄호를 생략할 수 있으며 암묵적으로 return된다. 위 표현과 동일하다.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 위 표현과 동일하다. 객체 반환시 소괄호를 사용한다.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>           <span class=\"token comment\">// multi line block.</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이와 같이 다양한 방식으로 구현할 수 있는 코드 방식으로 일관성있게 구현할 수 있도록 잡아주는 것이 ESLint의 역할이다.</p>\n<h1>사용 방법</h1>\n<h2>ESLint 설치</h2>\n<p><code class=\"language-text\">yarn add -D eslint</code></p>\n<h2>.eslintrc 설정</h2>\n<p>각종 lint 룰 설정을 위해 프로젝트 루트 디렉토리에 .eslintrc 파일을 만들어서 작성해야 한다.</p>\n<p>.eslintrc 파일의 확정자는 js, json, yml로 다양하게 설정 가능하다.</p>\n<p><a href=\"https://eslint.org/docs/latest/use/configure/configuration-files\">https://eslint.org/docs/latest/use/configure/configuration-files</a> (ESLint 공식 문서)</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./tsconfig.json\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"@typescript-eslint\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"@typescript-eslint/strict-boolean-expressions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"allowString\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"allowNumber\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ignorePatterns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*.test.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/frontend/generated/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>root : default가 true이고, 이 값이 true가 아니면 eslintrc 파일을 찾을 때 상위의 디렉토리까지 검색한다.</p>\n</li>\n<li>\n<p>plugins</p>\n<ul>\n<li>plugin 설정을 통해 다른 사람이 만든 규칙을 가져올 수 있다.</li>\n<li>plugin 종류는 다양하고, 여러 plugin을 가져와서 사용하는 경우가 많다.</li>\n<li>plugin에 추가된다고 해서 바로 적용되는 것이 아니고, extends나 rules 설정을 해야 적용할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>extends</p>\n<ul>\n<li>\n<p>plugin package의 규칙을 그대로 따르고 싶을 때 plugin을 extends에 추가한다.</p>\n</li>\n<li>\n<p>가져온 plugin을 일부만 사용할 수 있지만 보통 extends를 통해 plugin을 통째로 가져와 사용한다.</p>\n</li>\n<li>\n<p>plugin에서 extends 옵션을 제공하는 경우가 많은데, recommended/strict/all 등이 있다. plugin의 규칙을 얼마나 어떻게 따를 것인지 의미하며 보통 recommened를 많이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>parser</p>\n<ul>\n<li>\n<p>ESLint가 구문 분석을 위해 어떤 parser를 사용할지 설정한다.</p>\n</li>\n<li>\n<p>기본적으로 Expree parser를 사용하는데, Typescript 구문 분석을 위해 <code class=\"language-text\">@typescript-eslint/parser</code> 를 사용하며 설치가 필요하다.</p>\n<p><code class=\"language-text\">yarn add -D @typescript-eslint/parser</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>rules</p>\n<p>plugin의 규칙을 커스텀할 수 있다. extends하여 기본으로 설정된 규칙을 바꾸거나 없앨 수 있고, 기본으로 설정되지 않은 규칙을 추가할 수 있다.</p>\n</li>\n<li>\n<p>parserOptions : 자바스크립트 언어 옵션을 지정할 수 있다.</p>\n</li>\n<li>\n<p>env : 해당 환경에서 정의된 함수나 전역 변수를 사용할 수 있게 해준다.</p>\n<ul>\n<li><code class=\"language-text\">“browser”: true</code> 를 설정하면 console.log()를 에러 없이 사용할 수 있다.</li>\n<li><code class=\"language-text\">“node”: true</code>를 하게 되면, require를 에러 없이 사용할 수 있게 된다.</li>\n</ul>\n</li>\n</ul>\n<h1>Prettier</h1>\n<p>Prettier는 일관적인 코드 스타일을 유지할 수 있게 도와주는 툴이다.</p>\n<p>ESLint는 문법 에러를 잡아주거나 더 좋은 코드 구현 방식을 사용하도록 해주지만, Prettier는 줄바꿈, 공백, 들여 쓰기 등과 같은 스타일을 교정한다.</p>\n<h2>Prettier 설치</h2>\n<p><code class=\"language-text\">yarn add -D prettier</code></p>\n<h2>.prettierrc 설정</h2>\n<p>prettierrc는 공식 문서에서 원하는 옵션을 찾아 추가해주기만 하면 된다.</p>\n<blockquote>\n<p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p>\n</blockquote>\n<p>prettier의 각종 옵션을 직접 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"endOfLine\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>printWidth - 줄 바꿈할 줄 길이</li>\n<li>tabWidth - 들여쓰기 칸 수</li>\n<li>semi - 세미콜론 강제</li>\n<li>singleQuote - 작은 따옴표 사용을 강제</li>\n<li>trailingComma - 쉼표로 구분된 여러 줄인 구문에서 후행 쉼표를 추가</li>\n<li>endOfLine - EoF 방식, OS별로 처리 방식이 다름</li>\n</ul>\n<h2>ESLint와 Prettier</h2>\n<p>ESLint의 plugin들의 rule 중 스타일과 관련된 것들도 있기 때문에 Prettier와 충돌할 수 있다.</p>\n<p>이를 방지하기 위해 아래 두가지 plugin을 이용할 수 있다.</p>\n<ol>\n<li>\n<p>eslint-config-prettier : Prettier를 ESLint plugin으로 추가한다. Prettier가 인식하는 코드 포맷 오류를 ESLint 오류로 출력하도록 할 수 있다. (extends의 가장 마지막에 추가)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"extends\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"some-other-config-you-use\"</span>,\n  <span class=\"token string\">\"prettier\"</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>eslint-plugin-prettier: ESLint의 코드 포맷과 관련된 rule 중 prettier와 충돌하는 부분을 비활성화할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"plugins\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span>,\n<span class=\"token string\">\"rules\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"prettier/prettier\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"error\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> eslint-config-prettier eslint-plugin-prettier</code></pre></div>\n<h2>script 설정</h2>\n<p>package.json에 아래와 같이 추가하면</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn lint-eslint &amp;&amp; yarn lint-prettier\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint-eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ignore-path .gitignore src/**/*{ts,tsx} --fix\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint-prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write \\\"src/**/*.(ts|tsx)\\\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-text\">yarn lint</code>명령어로 편하게 lint를 실행할 수 있다.</p>\n<h1>Husky + lint-staged</h1>\n<p>huskey와 lint-stage로 커밋할 때마다 자동으로 lint를 검사할 수 있다.</p>\n<p>협업을 할 때에 ESLint + Prettier 설정을 해도 규칙에 맞지 않는 커밋을 할 수 있다.</p>\n<p>lint가 적용되지 않은 상태로 git에 파일이 올라가면, 그 이후 다른 누군가 제대로 lint를 적용하여 올리면 그 사람이 개발 중이던 이슈와 상관 없는 파일들까지 갈아 엎어지게 된다.</p>\n<p>그러면 어쩔 수 없이 모두 add하고 lint 적용 커밋을 날려야 한다.</p>\n<p>이러한 불편함을 해결하기 위해 lint-staged라는 도구를 사용한다.</p>\n<h2>lint-staged</h2>\n<p>lint-staged를 실행하면 staged 상태의 파일들에게 lint를 적용시켜준다.</p>\n<p>이는 git의 이벤트 사이에 원하는 스크립트를 끼워 넣을 수 있도록 해주는 git hook 때문에 가능하다.</p>\n<p>hook은 여러 종류가 있지만 lint-staged와 관계되는 것은 커밋 워크플로우 훅이며, 그 중에서도 <strong>pre-commit</strong>(커밋 직저에 실행되는 hook)을 이용한다.</p>\n<p>이를 husky와 함께 사용하면 편하다.</p>\n<h2>husky</h2>\n<p>git hook을 손쉽게 제어하도록 도와주는 도구이다.</p>\n<p>git hook은 .git/hooks 폴더 안의 스크립트 파일을 직접 수정하거나 추가하여 관리할 수 있다.</p>\n<p>그렇지만 직접 스크립트를 작성하는 것도 이것도 번거로울 수 있다.</p>\n<p>husky는 직접 스크립트를 작성하지 않고 hook을 설정할 수 있게 해준다.</p>\n<h1>사용 방법</h1>\n<h2>lint-staged 설치</h2>\n<p><code class=\"language-text\">yarn add -D lint-staged</code></p>\n<h2>lint-staged 설정</h2>\n<p>그 이후, package.json에 아래 코드를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"src/**/*.{js,jsx,ts,tsx}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"prettier --write\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 후 <code class=\"language-text\">yarn lint-staged</code> 명령어를 실행하면 staged 상태의 파일들에 lint를 적용시켜준다.</p>\n<h2>husky 설치</h2>\n<p><code class=\"language-text\">yarn add -D husky</code></p>\n<h2>husky 설정</h2>\n<p><code class=\"language-text\">yarn husky install</code> 명령어를 실행하면 root 디렉토리에 <strong>.husky</strong> 폴더가 생성되며 기본 설정 파일들이 생겨난다.</p>\n<p>아래 명령어를 통해 pre-commit hook에 lint-staged 실행을 서정한다.</p>\n<p><code class=\"language-text\">npx husky add .husky/pre-commit \"yarn lint-staged\"</code></p>\n<p>.husky/pre-commit 파일이 생겨나면 아래 내용이 있는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">#!/bin/sh\n. <span class=\"token string\">\"$(dirname \"</span>$<span class=\"token number\">0</span><span class=\"token string\">\")/_/husky.sh\"</span>\n\nyarn lint-staged</code></pre></div>\n<p>이제 모든 설정이 끝나 커밋할 때마다 lint-staged가 실행된다.</p>\n<hr>\n<p><strong>참고</strong></p>\n<p><a href=\"https://velog.io/@treejy/%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-ESLint-Prettier-config\">https://velog.io/@treejy/기본적인-ESLint-Prettier-config</a></p>","categories":["Study","Javascript","React"],"date":"July 30, 2023","description":"[Javascript] ESLint & Prettier에 대한 설명","id":"e9518509-15f1-59df-9c31-780ec28dfa44","keywords":["Javascript","React"],"slug":"/eslintandprettier/","title":"ESLint & Prettier","readingTime":{"text":"11 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["3262260831","948380417"],"slicesMap":{}}